description: |
  Install AWS CLI and Start a new ECS task using the specified task definition and other parameters.

docker:
  - image: << parameters.docker-image-for-job >>
parameters:
  docker-image-for-job:
    description: The docker image to be used for running this job on CircleCI.
    type: string
    default: 'cimg/python:3.10.4'
  aws-access-key-id:
    description: |
      AWS access key id for IAM role. Set this to the name of the environment variable you will use to hold this value, i.e. AWS_ACCESS_KEY_ID.
    type: env_var_name
    default: AWS_ACCESS_KEY_ID
  aws-secret-access-key:
    description: |
      AWS secret key for IAM role. Set this to the name of the environment variable you will use to hold this value, i.e. AWS_SECRET_ACCESS_KEY.
    type: env_var_name
    default: AWS_SECRET_ACCESS_KEY
  aws-region:
    description: AWS region to operate in. Set this to the name of the environment variable you will use to hold this value, i.e. AWS_DEFAULT_REGION.
    type: env_var_name
    default: AWS_REGION
  profile-name:
    description: AWS profile name to be configured.
    type: string
    default: ''
  role-arn:
    description: |
      The Amazon Resource Name (ARN) of the role that the caller is assuming.
      Role ARN must be configured for web identity.
    type: string
    default: ""
  role-session-name:
    description: An identifier for the assumed role session
    type: string
    default: ${CIRCLE_JOB}
  session-duration:
    description: The duration of the session in seconds
    type: string
    default: "3600"
  cluster:
    description: The name or ARN of the cluster on which to run the task.
    type: string
  task-definition:
    description: |
      "The family and revision (family:revision) or full ARN of the task
      definition to run. If a revision is not specified, the latest ACTIVE
      revision is used."
    type: string
  count:
    description: |
      "The number of instantiations of the specified task to place on your
      cluster. You can specify up to 10 tasks per call."
    type: integer
    default: 1
  started-by:
    description: |
      An optional tag specified when a task is started. For example, if
      you automatically trigger a task to run a batch process job, you
      could apply a unique identifier for that job to your task with the
      startedBy parameter. You can then identify which tasks belong to
      that job by filtering the results of a ListTasks call with the
      startedBy value. Up to 36 letters (uppercase and lowercase), num-
      bers, hyphens, and underscores are allowed.
    type: string
    default: ''
  group:
    description: |
      The name of the task group to associate with the task.
      The default value is the family name of the task definition
      (for example, family:my-family-name).
    type: string
    default: ''
  placement-constraints:
    description: |
      "An array of placement constraint objects to use for the task. You
      can specify up to 10 constraints per task (including constraints in
      the task definition and those specified at runtime).
      Expected format: type=string,field=string."
    type: string
    default: ''
  placement-strategy:
    description: |
      "The placement strategy objects to use for the task. You can specify
      a maximum of five strategy rules per task.
      Expected format: type=string,field=string."
    type: string
    default: ''
  launch-type:
    description: |
      The launch type on which to run your task.
      Possible values EC2, FARGATE, or an empty string.

      For more information, see Amazon ECS Launch Types in the Amazon Elastic Container Service Developer Guide.
    type: enum
    enum: ["FARGATE", "EC2", ""]
    default: FARGATE
  platform-version:
    description: |
      Use this to specify the platform version that the task should run on.
      A platform version should only be specified for tasks using the Fargate launch type.
    type: string
    default: ''
  awsvpc:
    description: |
      "Does your task definition use awsvpc mode or not. If so,
      this should be true and you should also include subnet-ids
      and optionally security-group-ids / assign-public-ips."
    type: boolean
    default: true
  subnet-ids:
    description: |
      "List of subnet ids separated by commas.
      Expected Format: subnet-70faa93b,subnet-bcc54b93"
    type: string
    default: ''
  security-group-ids:
    description: |
      "List of security group ids separated by commas.
      Expected Format: sg-010a460f7f442fa75,sg-010a420f7faa5fa75"
    type: string
    default: ''
  assign-public-ip:
    description: |
      "Assign a public IP or not"
    type: enum
    enum:
      - ENABLED
      - DISABLED
    default: DISABLED
  overrides:
    description: >
      A list of container overrides in JSON format that specify the name of
      a container in the specified task definition and the overrides it
      should receive.
    type: string
    default: ''
  tags:
    description: |
      "The metadata that you apply to the task to help you categorize and
      organize them. Each tag consists of a key and an optional value,
      both of which you define. Expected format: key=string,value=string."
    type: string
    default: ''
  enable-ecs-managed-tags:
    description: |
      "Specifies whether to enable Amazon ECS managed tags for the task."
    type: boolean
    default: false
  propagate-tags:
    description: |
      "Specifies whether to propagate the tags from the task definition to
      the task. If no value is specified, the tags are not propagated.
      Tags can only be propagated to the task during task creation. To add
      tags to a task after task creation, use the TagResource API action."
    type: boolean
    default: false
  capacity-provider-strategy:
    description: |
      The capacity provider strategy to use for the task.
      If a `capacity-provider-strategy` is specified, the `launch-type` parameter must be set to an empty string.
    type: string
    default: ""
  run-task-output:
    description: |
          Specifies a local json file to save the output logs from the aws ecs run-task command. Use tools like JQ to read and parse this information such as "task-arns" and "task-ids"
    type: string
    default: ''
steps:
  - when:
      condition: <<parameters.role-arn>>
      steps:
        - aws-cli/setup:
            role-arn: <<parameters.role-arn>>
            profile-name: <<parameters.profile-name>>
            session-duration: <<parameters.session-duration>>
            aws-region: <<parameters.aws-region>>
            role-session-name: <<parameters.role-session-name>>
  - unless:
      condition: <<parameters.role-arn>>
      steps:
        - aws-cli/setup:
            aws-access-key-id: << parameters.aws-access-key-id >>
            aws-secret-access-key: << parameters.aws-secret-access-key >>
            aws-region: << parameters.aws-region >>
            profile-name: << parameters.profile-name >>
  - run-task:
      cluster: << parameters.cluster >>
      task-definition: << parameters.task-definition >>
      count: << parameters.count >>
      started-by: << parameters.started-by >>
      group: << parameters.group >>
      placement-constraints: << parameters.placement-constraints >>
      placement-strategy: << parameters.placement-strategy >>
      launch-type: << parameters.launch-type >>
      platform-version: << parameters.platform-version >>
      awsvpc: << parameters.awsvpc >>
      subnet-ids: << parameters.subnet-ids >>
      security-group-ids: << parameters.security-group-ids >>
      assign-public-ip: << parameters.assign-public-ip >>
      overrides: << parameters.overrides >>
      tags: << parameters.tags >>
      enable-ecs-managed-tags: << parameters.enable-ecs-managed-tags >>
      propagate-tags: << parameters.propagate-tags >>
      capacity-provider-strategy: << parameters.capacity-provider-strategy >>
      profile-name: << parameters.profile-name >>
      run-task-output: <<parameters.run-task-output>>
