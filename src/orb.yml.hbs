version: 2.1
description: |
  An orb for working with Amazon Elastic Container Service (ECS).
  Supports the EC2 and Fargate launch types and Blue/Green deployment
  via CodeDeploy.
  Repository link: https://github.com/CircleCI-Public/aws-ecs-orb

orbs:
  aws-cli: circleci/aws-cli@0.1.4

examples:
  deploy-service-update:
    description: Update an ECS service.
    usage:
      version: 2.1

      orbs:
        aws-ecr: circleci/aws-ecr@0.0.4
        aws-ecs: circleci/aws-ecs@0.0.10

      workflows:
        build-and-deploy:
          jobs:
            - aws-ecr/build_and_push_image:
                account-url: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
                repo: "${MY_APP_PREFIX}"
                region: "${AWS_REGION}"
                tag: "${CIRCLE_SHA1}"
            - aws-ecs/deploy-service-update:
                requires:
                  - aws-ecr/build_and_push_image
                family: "${MY_APP_PREFIX}-service"
                cluster-name: "${MY_APP_PREFIX}-cluster"
                container-image-name-updates: "container=${MY_APP_PREFIX}-service,tag=${CIRCLE_SHA1}"

  update-service:
    description: |
      Use the AWS CLI and this orb to update an ECS service.
      (Supports both EC2 and Fargate launch types)
    usage:
      version: 2.1

      orbs:
        aws-cli: circleci/aws-cli@0.1.4
        aws-ecs: circleci/aws-ecs@0.0.10

      jobs:
        update-tag:
          docker:
            - image: circleci/python:3.7.1
          steps:
            - aws-cli/install
            - aws-cli/configure:
                aws-access-key-id: "$AWS_ACCESS_KEY_ID"
                aws-region: "$AWS_REGION"
            - aws-ecs/update-service:
                family: "${MY_APP_PREFIX}-service"
                cluster-name: "${MY_APP_PREFIX}-cluster"
                container-image-name-updates: "container=${MY_APP_PREFIX}-service,tag=stable"

      workflows:
        deploy:
          jobs:
            - update-tag

  verify-revision-deployment:
    description: Verify the deployment of an ECS revision.
    usage:
      version: 2.1

      orbs:
        aws-cli: circleci/aws-cli@0.1.4
        aws-ecs: circleci/aws-ecs@0.0.10

      jobs:
        verify-deployment:
          docker:
            - image: circleci/python:3.7.1
          steps:
            - aws-cli/install
            - aws-cli/configure:
                aws-access-key-id: "$AWS_ACCESS_KEY_ID"
                aws-region: "$AWS_REGION"
            - run:
                name: Get last task definition
                command: |
                  TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
                      --task-definition ${MY_APP_PREFIX}-service \
                      --output text \
                      --query 'taskDefinition.taskDefinitionArn')
                  echo "export TASK_DEFINITION_ARN='${TASK_DEFINITION_ARN}'" >> $BASH_ENV
            - aws-ecs/verify-revision-is-deployed:
                family: "${MY_APP_PREFIX}-service"
                cluster-name: "${MY_APP_PREFIX}-cluster"
                task-definition-arn: "${TASK_DEFINITION_ARN}"

      workflows:
        test-workflow:
          jobs:
            - verify-deployment

  run-task-fargate:
    description: Start the run of an ECS task on Fargate.
    usage:
      version: 2.1

      orbs:
        aws-ecs: circleci/aws-ecs@x.y.z

      jobs:
        run-task:
          docker:
            - image: circleci/python:3.7.1
          steps:
            - aws-ecs/run-task:
                cluster: "cluster1"
                task-definition: "myapp"
                # e.g. "subnet-70faa93b,subnet-bcc54b93"
                subnet-ids: $SUBNET_ONE, $SUBNET_TWO
                # e.g. "sg-010a460f7f442fa75"
                security-group-ids: $SECURITY_GROUP_IDS

      workflows:
        run-task:
          jobs:
            - run-task

  run-task-ec2:
    description: Start the run of an ECS task on EC2.
    usage:
      version: 2.1

      orbs:
        aws-ecs: circleci/aws-ecs@x.y.z

      jobs:
        run-task:
          docker:
            - image: circleci/python:3.7.1
          steps:
            - aws-ecs/run-task:
                cluster: "cluster1"
                task-definition: "myapp"
                awsvpc: false

      workflows:
        run-task:
          jobs:
            - run-task

jobs:
  deploy-service-update:
    docker:
      - image: << parameters.docker-image-for-job >>
    parameters:
      docker-image-for-job:
        description:
          "The docker image to be used for running this job on CircleCI."
        type: string
        default: circleci/python:3.7.1
      aws-access-key-id:
        description: |
          AWS access key id for IAM role. Defaulted to $AWS_ACCESS_KEY_ID
        type: string
        default: $AWS_ACCESS_KEY_ID
      aws-secret-access-key:
        description: |
          AWS secret key for IAM role. Defaulted to $AWS_SECRET_ACCESS_KEY
        type: string
        default: $AWS_SECRET_ACCESS_KEY
      aws-region:
        description:
          AWS region to operate in. Defaulted to $AWS_REGION
        type: string
        default: $AWS_REGION
      family:
        description:
          "Name of the task definition's family."
        type: string
      cluster-name:
        description:
          "The short name or full ARN of the cluster that hosts the service."
        type: string
      service-name:
        description:
          "The name of the service to update. If undefined, we assume `family` is the name of both the service and task definition."
        type: string
        default: ""
      deployment-controller:
        description:
          "The deployment controller to use for the service. Defaulted to ECS"
        type: enum
        enum: ["ECS", "CODE_DEPLOY"]
        default: "ECS"
      codedeploy-application-name:
        description: |
          The name of the AWS CodeDeploy application used for the deployment.
          Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
        type: string
        default: ""
      codedeploy-deployment-group-name:
        description: |
          The name of the AWS CodeDeploy deployment group used for the deployment.
          Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
        type: string
        default: ""
      codedeploy-load-balanced-container-name:
        description: |
          The name of the container to be load-balanced via AWS CodeDeploy.
          Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
        type: string
        default: ""
      codedeploy-load-balanced-container-port:
        description: |
          The port of the container to be load-balanced via AWS CodeDeploy.
          Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
        type: integer
        default: 80
      container-image-name-updates:
        description: |
          Use this to update the Docker image names and/or tag names of existing
          containers that had been defined in the previous task definition.
          Expected format: container=<container-name>,image-and-tag=<image-name>:<tag-name>|image=<image-name>|tag=<tag-name>,container=...,image-and-tag|image|tag=...,
          For each container, specify only either "image-and-tag" or "image" or "tag".
          If "image-and-tag" is specified, the container image will be updated to the value of the name-value pair.
          If "image" is specified, the image tag defined in the previous task definition will be retained, if exists.
          If "tag" is specified, the image name defined in the previous task definition will be used.
        type: string
        default: ""
      container-env-var-updates:
        description: |
          Use this to update or set the values of environment variables that will be defined for the containers. 
          (Existing environment variables not included in this parameter will not be removed)
          Expected format: container=<container-name>,name=<env-var-name>,value=<env-var-value>,container=...,name=...,value=...,
          Values should not contain commas.
        type: string
        default: ""
      verify-revision-is-deployed:
        description: |
          Runs the verify-revision-is-deployed Orb command to verify that
          the revision has been deployed and is the only deployed revision
          for the service. Note: enabling this may result in the build
          being marked as failed if tasks for older revisions fail to be stopped
          before the max number of polling attempts is reached.
          Does not support ECS services that are of the Blue/Green Deployment type.
        type: boolean
        default: false
      max-poll-attempts:
        description: |
          The maximum number of attempts to poll the deployment status before giving up.
          Only in use when verify-revision-is-deployed is set to true.
        type: integer
        default: 50
      poll-interval:
        description: |
          The polling interval, in seconds.
          Only in use when verify-revision-is-deployed is set to true.
        type: integer
        default: 20
      fail-on-verification-timeout:
        description: |
          Whether to exit with an error if the verification of the deployment
          status does not complete within the number of polling attempts.
          Only in use when verify-revision-is-deployed is set to true.
        type: boolean
        default: true
    steps:
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
          aws-region: << parameters.aws-region >>
      - update-service:
          family: << parameters.family >>
          cluster-name: << parameters.cluster-name >>
          service-name: << parameters.service-name >>
          deployment-controller: << parameters.deployment-controller >>
          codedeploy-application-name: << parameters.codedeploy-application-name >>
          codedeploy-deployment-group-name: << parameters.codedeploy-deployment-group-name >>
          codedeploy-load-balanced-container-name: << parameters.codedeploy-load-balanced-container-name >>
          codedeploy-load-balanced-container-port: << parameters.codedeploy-load-balanced-container-port >>
          container-image-name-updates: << parameters.container-image-name-updates >>
          container-env-var-updates: << parameters.container-env-var-updates >>
          verify-revision-is-deployed: << parameters.verify-revision-is-deployed >>
          max-poll-attempts: << parameters.max-poll-attempts >>
          poll-interval: << parameters.poll-interval >>
          fail-on-verification-timeout: << parameters.fail-on-verification-timeout >>
  update-task-definition:
    docker:
      - image: << parameters.docker-image-for-job >>
    parameters:
      docker-image-for-job:
        description:
          "The docker image to be used for running this job on CircleCI."
        type: string
        default: circleci/python:3.7.1
      aws-access-key-id:
        description: |
          AWS access key id for IAM role. Defaulted to $AWS_ACCESS_KEY_ID
        type: string
        default: $AWS_ACCESS_KEY_ID
      aws-secret-access-key:
        description: |
          AWS secret key for IAM role. Defaulted to $AWS_SECRET_ACCESS_KEY
        type: string
        default: $AWS_SECRET_ACCESS_KEY
      aws-region:
        description:
          AWS region to operate in. Defaulted to $AWS_REGION
        type: string
        default: $AWS_REGION
      family:
        description:
          "Name of the task definition's family."
        type: string
      container-image-name-updates:
        description: |
          Use this to update the Docker image names and/or tag names of existing
          containers that had been defined in the previous task definition.
          Expected format: container=<container-name>,image-and-tag=<image-name>:<tag-name>|image=<image-name>|tag=<tag-name>,container=...,image-and-tag|image|tag=...,
          For each container, specify only either "image-and-tag" or "image" or "tag".
          If "image-and-tag" is specified, the container image will be updated to the value of the name-value pair.
          If "image" is specified, the image tag defined in the previous task definition will be retained, if exists.
          If "tag" is specified, the image name defined in the previous task definition will be used.
        type: string
        default: ""
      container-env-var-updates:
        description: |
          Use this to update or set the values of environment variables that will be defined for the containers. 
          (Existing environment variables not included in this parameter will not be removed)
          Expected format: container=<container-name>,name=<env-var-name>,value=<env-var-value>,container=...,name=...,value=...,
          Values should not contain commas.
        type: string
        default: ""
    steps:
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
          aws-region: << parameters.aws-region >>
      - update-task-definition:
          family: << parameters.family >>
          container-image-name-updates: << parameters.container-image-name-updates >>
          container-env-var-updates: << parameters.container-env-var-updates >>
  run-task:
    docker:
      - image: << parameters.docker-image-for-job >>
    parameters:
      docker-image-for-job:
        description:
          "The docker image to be used for running this job on CircleCI."
        type: string
        default: circleci/python:3.7.1
      aws-access-key-id:
        description: |
          AWS access key id for IAM role. Defaulted to $AWS_ACCESS_KEY_ID
        type: string
        default: $AWS_ACCESS_KEY_ID
      aws-secret-access-key:
        description: |
          AWS secret key for IAM role. Defaulted to $AWS_SECRET_ACCESS_KEY
        type: string
        default: $AWS_SECRET_ACCESS_KEY
      aws-region:
        description:
          AWS region to operate in. Defaulted to $AWS_REGION
        type: string
        default: $AWS_REGION
      cluster:
        description:
          "The name or ARN of the cluster on which to run the task."
        type: string
      task-definition:
        description: |
          "The family and revision (family:revision) or full ARN of the task
          definition to run. If a revision is not specified, the latest ACTIVE
          revision is used."
        type: string
      count:
        description: |
          "The number of instantiations of the specified task to place on your
          cluster. You can specify up to 10 tasks per call."
        type: integer
        default: 1
      started-by:
        description: |
          An optional tag specified when a task is started. For example, if
          you automatically trigger a task to run a batch process job, you
          could apply a unique identifier for that job to your task with the
          startedBy parameter. You can then identify which tasks belong to
          that job by filtering the results of a ListTasks call with the
          startedBy value. Up to 36 letters (uppercase and lowercase), num-
          bers, hyphens, and underscores are allowed.
        type: string
        default: ""
      group:
        description: |
          The name of the task group to associate with the task.
          The default value is the family name of the task definition
          (for example, family:my-family-name).
        type: string
        default: ""
      placement-constraints:
        description: |
          "An array of placement constraint objects to use for the task. You
          can specify up to 10 constraints per task (including constraints in
          the task definition and those specified at runtime).
          Expected format: type=string,field=string."
        type: string
        default: ""
      placement-strategy:
        description: |
          "The placement strategy objects to use for the task. You can specify
          a maximum of five strategy rules per task.
          Expected format: type=string,field=string."
        type: string
        default: ""
      launch-type:
        description: |
          The launch type on which to run your task. For more information, see
          Amazon ECS Launch Types in the Amazon Elastic Container Service
          Developer Guide. Possible values EC2, FARGATE.
        type: enum
        enum: ["FARGATE", "EC2"]
        default: "FARGATE"
      platform-version:
        description: |
          "The platform version the task should run. A platform version is only
          specified for tasks using the Fargate launch type."
        type: string
        default: "LATEST"
      awsvpc:
        description: |
          "Does your task definition use awsvpc mode or not. If so,
          this should be true and you should also include subnet-ids
          and optionally security-group-ids / assign-public-ips."
        type: boolean
        default: true
      subnet-ids:
        description: |
          "List of subnet ids separated by commas.
          Expected Format: subnet-70faa93b,subnet-bcc54b93"
        type: string
        default: ""
      security-group-ids:
        description: |
          "List of security group ids separated by commas.
          Expected Format: sg-010a460f7f442fa75,sg-010a420f7faa5fa75"
        type: string
        default: ""
      assign-public-ip:
        description: |
          "Assign a public IP or not"
        type: enum
        enum: ["ENABLED", "DISABLED"]
        default: "DISABLED"
      tags:
        description: |
          "The metadata that you apply to the task to help you categorize and
          organize them. Each tag consists of a key and an optional value,
          both of which you define. Expected format: key=string,value=string."
        type: string
        default: ""
      enable-ecs-managed-tags:
        description: |
          "Specifies whether to enable Amazon ECS managed tags for the task."
        type: boolean
        default: false
      propagate-tags:
        description: |
          "Specifies whether to propagate the tags from the task definition to
          the task. If no value is specified, the tags are not propagated.
          Tags can only be propagated to the task during task creation. To add
          tags to a task after task creation, use the TagResource API action."
        type: boolean
        default: false
    steps:
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: << parameters.aws-access-key-id >>
          aws-secret-access-key: << parameters.aws-secret-access-key >>
          aws-region: << parameters.aws-region >>
      - run-task:
          cluster: << parameters.cluster >>
          task-definition: << parameters.task-definition >>
          count: << parameters.count >>
          started-by: << parameters.started-by >>
          group: << parameters.group >>
          placement-constraints: << parameters.placement-constraints >>
          placement-strategy: << parameters.placement-strategy >>
          launch-type: << parameters.launch-type >>
          platform-version: << parameters.platform-version >>
          awsvpc: << parameters.awsvpc >>
          subnet-ids: << parameters.subnet-ids >>
          security-group-ids: << parameters.security-group-ids >>
          assign-public-ip: << parameters.assign-public-ip >>
          tags: << parameters.tags >>
          enable-ecs-managed-tags: << parameters.enable-ecs-managed-tags >>
          propagate-tags: << parameters.propagate-tags >>

commands:
  verify-revision-is-deployed:
    description: |
      Polls the service's deployment status at intervals until the given task
      definition revision is the only one deployed for the service, and for the
      task definition revision's running task count to match the desired count.
      Does not support ECS services that are of the Blue/Green Deployment type.
    parameters:
      family:
        description:
          "Name of the task definition's family."
        type: string
      cluster-name:
        description:
          "The short name or full ARN of the cluster that hosts the service."
        type: string
      service-name:
        description:
          "The name of the service to update. If undefined, we assume `family` is the name of both the service and task definition."
        type: string
        default: ""
      task-definition-arn:
        description:
          "ARN of the task definition whose deployment status is to be monitored."
        type: string
      max-poll-attempts:
        description:
          "The maximum number of attempts to poll for the deployment status before giving up."
        type: integer
        default: 50
      poll-interval:
        description:
          "The polling interval, in seconds."
        type: integer
        default: 20
      fail-on-verification-timeout:
        description: |
          Whether to exit with an error if the verification of the deployment
          status does not complete within the number of polling attempts.
        type: boolean
        default: true
    steps:
      - run:
          name: Verify that the revision is deployed and older revisions are stopped
          description: |
            Poll the deployment status at intervals till the given task definition
            revision has reached its desired running task count and is the only
            one deployed for the service.
          command: |
            if [ "<< parameters.task-definition-arn >>" = "" ]; then
                echo "Invalid task-definition-arn parameter value: << parameters.task-definition-arn >>"
                exit 1
            fi

            SERVICE_NAME="$(echo << parameters.service-name >>)"

            if [ -z "${SERVICE_NAME}" ]; then
                SERVICE_NAME="$(echo << parameters.family >>)"
            fi

            echo "Verifying that << parameters.task-definition-arn >> is deployed.."
            attempt=0
            while [ "$attempt" -lt << parameters.max-poll-attempts >> ]
            do
                DEPLOYMENTS=$(aws ecs describe-services \
                    --cluster << parameters.cluster-name >> \
                    --services ${SERVICE_NAME} \
                    --output text \
                    --query 'services[0].deployments[].[taskDefinition, status]')
                NUM_DEPLOYMENTS=$(aws ecs describe-services \
                    --cluster << parameters.cluster-name >> \
                    --services ${SERVICE_NAME} \
                    --output text \
                    --query 'length(services[0].deployments)')
                TARGET_REVISION=$(aws ecs describe-services \
                    --cluster << parameters.cluster-name >> \
                    --services ${SERVICE_NAME} \
                    --output text \
                    --query "services[0].deployments[?taskDefinition==\`<< parameters.task-definition-arn >>\` && runningCount == desiredCount && (status == \`PRIMARY\` || status == \`ACTIVE\`)][taskDefinition]")
                echo "Current deployments: $DEPLOYMENTS"
                if [ "$NUM_DEPLOYMENTS" = "1" ] && [ "$TARGET_REVISION" = "<< parameters.task-definition-arn >>" ]; then
                    echo "The task definition revision $TARGET_REVISION is the only deployment for the service and has attained the desired running task count."
                    exit 0
                else
                    echo "Waiting for revision << parameters.task-definition-arn >> to reach desired running count / older revisions to be stopped.."
                    sleep << parameters.poll-interval >>
                fi
                attempt=$((attempt + 1))
            done
            echo "Stopped waiting for deployment to be stable - please check the status of << parameters.task-definition-arn >> on the AWS ECS console."
            <<# parameters.fail-on-verification-timeout >>exit 1<</ parameters.fail-on-verification-timeout >>
  update-task-definition:
    description: Registers a task definition based on the last task definition, except
      with the Docker image/tag names and environment variables of the containers
      updated according to this command's parameters.
    parameters:
      family:
        description:
          "Name of the task definition's family."
        type: string
      container-image-name-updates:
        description: |
          Use this to update the Docker image names and/or tag names of existing
          containers that had been defined in the previous task definition.
          Expected format: container=<container-name>,image-and-tag=<image-name>:<tag-name>|image=<image-name>|tag=<tag-name>,container=...,image-and-tag|image|tag=...,
          For each container, specify only either "image-and-tag" or "image" or "tag".
          If "image-and-tag" is specified, the container image will be updated to the value of the name-value pair.
          If "image" is specified, the image tag defined in the previous task definition will be retained, if exists.
          If "tag" is specified, the image name defined in the previous task definition will be used.
        type: string
        default: ""
      container-env-var-updates:
        description: |
          Use this to update or set the values of environment variables that will be defined for the containers. 
          (Existing environment variables not included in this parameter will not be removed)
          Expected format: container=<container-name>,name=<env-var-name>,value=<env-var-value>,container=...,name=...,value=...,
          Values should not contain commas.
        type: string
        default: ""
    steps:
      - run:
          name: Retrieve previous task definition and prepare new task definition values
          command: |
            PREVIOUS_TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition << parameters.family >> --include TAGS)
            CONTAINER_IMAGE_NAME_UPDATES="$(echo << parameters.container-image-name-updates >>)"
            CONTAINER_ENV_VAR_UPDATES="$(echo << parameters.container-env-var-updates >>)"

            # Prepare script for updating container definitions
            UPDATE_CONTAINER_DEFS_SCRIPT_FILE=$(mktemp _update_container_defs.py.XXXXXX)
            chmod +x $UPDATE_CONTAINER_DEFS_SCRIPT_FILE
            cat > $UPDATE_CONTAINER_DEFS_SCRIPT_FILE \<<-EOF
            {{> UPDATE_CONTAINER_DEFS_SCRIPT_SRC}}

            EOF

            # Prepare container definitions
            CONTAINER_DEFS=$(python $UPDATE_CONTAINER_DEFS_SCRIPT_FILE "$PREVIOUS_TASK_DEFINITION" "$CONTAINER_IMAGE_NAME_UPDATES" "$CONTAINER_ENV_VAR_UPDATES")
            
            # Escape single quotes from environment variables for BASH_ENV
            CLEANED_CONTAINER_DEFS=$(sed -r "s/'+/'\\\''/g" \<<< $CONTAINER_DEFS)

            # Prepare script for getting task definition values
            GET_TASK_DFN_VAL_SCRIPT_FILE=$(mktemp _get_task_def_value.py.XXXXXX)
            chmod +x $GET_TASK_DFN_VAL_SCRIPT_FILE
            cat > $GET_TASK_DFN_VAL_SCRIPT_FILE \<<-EOF
            {{> GET_TASK_DFN_VAL_SCRIPT_SRC}}

            EOF

            # Get other task definition values
            TASK_ROLE=$(python $GET_TASK_DFN_VAL_SCRIPT_FILE 'taskRoleArn' "$PREVIOUS_TASK_DEFINITION")
            EXECUTION_ROLE=$(python $GET_TASK_DFN_VAL_SCRIPT_FILE 'executionRoleArn' "$PREVIOUS_TASK_DEFINITION")
            NETWORK_MODE=$(python $GET_TASK_DFN_VAL_SCRIPT_FILE 'networkMode' "$PREVIOUS_TASK_DEFINITION")
            VOLUMES=$(python $GET_TASK_DFN_VAL_SCRIPT_FILE 'volumes' "$PREVIOUS_TASK_DEFINITION")
            PLACEMENT_CONSTRAINTS=$(python $GET_TASK_DFN_VAL_SCRIPT_FILE 'placementConstraints' "$PREVIOUS_TASK_DEFINITION")
            REQ_COMP=$(python $GET_TASK_DFN_VAL_SCRIPT_FILE 'requiresCompatibilities' "$PREVIOUS_TASK_DEFINITION")
            TASK_CPU=$(python $GET_TASK_DFN_VAL_SCRIPT_FILE 'cpu' "$PREVIOUS_TASK_DEFINITION")
            TASK_MEMORY=$(python $GET_TASK_DFN_VAL_SCRIPT_FILE 'memory' "$PREVIOUS_TASK_DEFINITION")
            PID_MODE=$(python $GET_TASK_DFN_VAL_SCRIPT_FILE 'pidMode' "$PREVIOUS_TASK_DEFINITION")
            IPC_MODE=$(python $GET_TASK_DFN_VAL_SCRIPT_FILE 'ipcMode' "$PREVIOUS_TASK_DEFINITION")
            TAGS=$(python $GET_TASK_DFN_VAL_SCRIPT_FILE 'tags' "$PREVIOUS_TASK_DEFINITION")
            PROXY_CONFIGURATION=$(python $GET_TASK_DFN_VAL_SCRIPT_FILE 'proxyConfiguration' "$PREVIOUS_TASK_DEFINITION")

            # Make task definition values available as env variables
            echo "export CCI_ORB_AWS_ECS_TASK_ROLE='${TASK_ROLE}'" >> $BASH_ENV
            echo "export CCI_ORB_AWS_ECS_EXECUTION_ROLE='${EXECUTION_ROLE}'" >> $BASH_ENV
            echo "export CCI_ORB_AWS_ECS_NETWORK_MODE='${NETWORK_MODE}'" >> $BASH_ENV
            echo "export CCI_ORB_AWS_ECS_CONTAINER_DEFS='${CLEANED_CONTAINER_DEFS}'" >> $BASH_ENV
            echo "export CCI_ORB_AWS_ECS_VOLUMES='${VOLUMES}'" >> $BASH_ENV
            echo "export CCI_ORB_AWS_ECS_PLACEMENT_CONSTRAINTS='${PLACEMENT_CONSTRAINTS}'" >> $BASH_ENV
            echo "export CCI_ORB_AWS_ECS_REQ_COMP='${REQ_COMP}'" >> $BASH_ENV
            echo "export CCI_ORB_AWS_ECS_TASK_CPU='${TASK_CPU}'" >> $BASH_ENV
            echo "export CCI_ORB_AWS_ECS_TASK_MEMORY='${TASK_MEMORY}'" >> $BASH_ENV
            echo "export CCI_ORB_AWS_ECS_PID_MODE='${PID_MODE}'" >> $BASH_ENV
            echo "export CCI_ORB_AWS_ECS_IPC_MODE='${IPC_MODE}'" >> $BASH_ENV
            echo "export CCI_ORB_AWS_ECS_TAGS='${TAGS}'" >> $BASH_ENV
            echo "export CCI_ORB_AWS_ECS_PROXY_CONFIGURATION='${PROXY_CONFIGURATION}'" >> $BASH_ENV

            rm $UPDATE_CONTAINER_DEFS_SCRIPT_FILE $GET_TASK_DFN_VAL_SCRIPT_FILE
      - run:
          name: Register new task definition
          command: |
            if [ -n "${CCI_ORB_AWS_ECS_TASK_ROLE}" ]; then
                set -- "$@" --task-role-arn "${CCI_ORB_AWS_ECS_TASK_ROLE}"
            fi
            if [ -n "${CCI_ORB_AWS_ECS_EXECUTION_ROLE}" ]; then
                set -- "$@" --execution-role-arn "${CCI_ORB_AWS_ECS_EXECUTION_ROLE}"
            fi
            if [ -n "${CCI_ORB_AWS_ECS_NETWORK_MODE}" ]; then
                set -- "$@" --network-mode "${CCI_ORB_AWS_ECS_NETWORK_MODE}"
            fi
            if [ -n "${CCI_ORB_AWS_ECS_VOLUMES}" ] && [ "${CCI_ORB_AWS_ECS_VOLUMES}" != "[]" ]; then
                set -- "$@" --volumes "${CCI_ORB_AWS_ECS_VOLUMES}"
            fi
            if [ -n "${CCI_ORB_AWS_ECS_PLACEMENT_CONSTRAINTS}" ] && [ "${CCI_ORB_AWS_ECS_PLACEMENT_CONSTRAINTS}" != "[]" ]; then
                set -- "$@" --placement-constraints "${CCI_ORB_AWS_ECS_PLACEMENT_CONSTRAINTS}"
            fi
            if [ -n "${CCI_ORB_AWS_ECS_REQ_COMP}" ] && [ "${CCI_ORB_AWS_ECS_REQ_COMP}" != "[]" ]; then
                set -- "$@" --requires-compatibilities ${CCI_ORB_AWS_ECS_REQ_COMP}
            fi
            if [ -n "${CCI_ORB_AWS_ECS_TASK_CPU}" ]; then
                set -- "$@" --cpu "${CCI_ORB_AWS_ECS_TASK_CPU}"
            fi
            if [ -n "${CCI_ORB_AWS_ECS_TASK_MEMORY}" ]; then
                set -- "$@" --memory "${CCI_ORB_AWS_ECS_TASK_MEMORY}"
            fi
            if [ -n "${CCI_ORB_AWS_ECS_PID_MODE}" ]; then
                set -- "$@" --pid-mode "${CCI_ORB_AWS_ECS_PID_MODE}"
            fi
            if [ -n "${CCI_ORB_AWS_ECS_IPC_MODE}" ]; then
                set -- "$@" --ipc-mode "${CCI_ORB_AWS_ECS_IPC_MODE}"
            fi
            if [ -n "${CCI_ORB_AWS_ECS_TAGS}" ] && [ "${CCI_ORB_AWS_ECS_TAGS}" != "[]" ]; then
                set -- "$@" --tags "${CCI_ORB_AWS_ECS_TAGS}"
            fi
            if [ -n "${CCI_ORB_AWS_ECS_PROXY_CONFIGURATION}" ] && [ "${CCI_ORB_AWS_ECS_PROXY_CONFIGURATION}" != "{}" ]; then
                set -- "$@" --proxy-configuration "${CCI_ORB_AWS_ECS_PROXY_CONFIGURATION}"
            fi
            REVISION=$(aws ecs register-task-definition \
                --family << parameters.family >> \
                --container-definitions "${CCI_ORB_AWS_ECS_CONTAINER_DEFS}" \
                "$@" \
                --output text \
                --query 'taskDefinition.taskDefinitionArn')
            echo "Registered task definition: ${REVISION}"
            echo "export CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN='${REVISION}'" >> $BASH_ENV
  update-service:
    description: |
      Registers a task definition for the given ECS service and updates the service to
      use it. Optionally polls the status of the deployment until the created task
      definition revision has reached its desired running task count and is the only
      revision deployed for the service.
    parameters:
      family:
        description:
          "Name of the task definition's family."
        type: string
      cluster-name:
        description:
          "The short name or full ARN of the cluster that hosts the service."
        type: string
      service-name:
        description:
          "The name of the service to update. If undefined, we assume `family` is the name of both the service and task definition."
        type: string
        default: ""
      deployment-controller:
        description:
          "The deployment controller to use for the service. Defaulted to ECS"
        type: enum
        enum: ["ECS", "CODE_DEPLOY"]
        default: "ECS"
      codedeploy-application-name:
        description: |
          The name of the AWS CodeDeploy application used for the deployment.
          Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
        type: string
        default: ""
      codedeploy-deployment-group-name:
        description: |
          The name of the AWS CodeDeploy deployment group used for the deployment.
          Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
        type: string
        default: ""
      codedeploy-load-balanced-container-name:
        description: |
          The name of the container to be load-balanced via AWS CodeDeploy.
          Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
        type: string
        default: ""
      codedeploy-load-balanced-container-port:
        description: |
          The port of the container to be load-balanced via AWS CodeDeploy.
          Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
        type: integer
        default: 80
      container-image-name-updates:
        description: |
          Use this to update the Docker image names and/or tag names of existing
          containers that had been defined in the previous task definition.
          Expected format: container=<container-name>,image-and-tag=<image-name>:<tag-name>|image=<image-name>|tag=<tag-name>,container=...,image-and-tag|image|tag=...,
          For each container, specify only either "image-and-tag" or "image" or "tag".
          If "image-and-tag" is specified, the container image will be updated to the value of the name-value pair.
          If "image" is specified, the image tag defined in the previous task definition will be retained, if exists.
          If "tag" is specified, the image name defined in the previous task definition will be used.
        type: string
        default: ""
      container-env-var-updates:
        description: |
          Use this to update or set the values of environment variables that will be defined for the containers. 
          (Existing environment variables not included in this parameter will not be removed)
          Expected format: container=<container-name>,name=<env-var-name>,value=<env-var-value>,container=...,name=...,value=...,
          Values should not contain commas.
        type: string
        default: ""
      verify-revision-is-deployed:
        description: |
          Runs the verify-revision-is-deployed Orb command to verify that
          the revision has been deployed and is the only deployed revision
          for the service. Note: enabling this may result in the build
          being marked as failed if tasks for older revisions fail to be stopped
          before the max number of polling attempts is reached.
          Does not support ECS services that are of the Blue/Green Deployment type.
        type: boolean
        default: false
      max-poll-attempts:
        description: |
          The maximum number of attempts to poll the deployment status before giving up.
          Only in use when verify-revision-is-deployed is set to true.
        type: integer
        default: 50
      poll-interval:
        description: |
          The polling interval, in seconds.
          Only in use when verify-revision-is-deployed is set to true.
        type: integer
        default: 20
      fail-on-verification-timeout:
        description: |
          Whether to exit with an error if the verification of the deployment
          status does not complete within the number of polling attempts.
          Only in use when verify-revision-is-deployed is set to true.
        type: boolean
        default: true
    steps:
      - update-task-definition:
          family: << parameters.family >>
          container-image-name-updates: << parameters.container-image-name-updates >>
          container-env-var-updates: << parameters.container-env-var-updates >>
      - run:
          name: Update service with registered task definition
          command: |
            DEPLOYMENT_CONTROLLER="$(echo << parameters.deployment-controller >>)"

            if [ "${DEPLOYMENT_CONTROLLER}" = "CODE_DEPLOY" ]; then
                DEPLOYED_REVISION="${CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN}"
                DEPLOYMENT_ID=$(aws deploy create-deployment \
                    --application-name "<< parameters.codedeploy-application-name >>" \
                    --deployment-group-name "<< parameters.codedeploy-deployment-group-name >>" \
                    --revision "{\"revisionType\": \"AppSpecContent\", \"appSpecContent\": {\"content\": \"{\\\"version\\\": 1, \\\"Resources\\\": [{\\\"TargetService\\\": {\\\"Type\\\": \\\"AWS::ECS::Service\\\", \\\"Properties\\\": {\\\"TaskDefinition\\\": \\\"${CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN}\\\", \\\"LoadBalancerInfo\\\": {\\\"ContainerName\\\": \\\"<< parameters.codedeploy-load-balanced-container-name >>\\\", \\\"ContainerPort\\\": << parameters.codedeploy-load-balanced-container-port >>}}}}]}\"}}" \
                    --query deploymentId)
                echo "Created CodeDeploy deployment: $DEPLOYMENT_ID"
            else
              SERVICE_NAME="$(echo << parameters.service-name >>)"

              if [ -z "${SERVICE_NAME}" ]; then
                  SERVICE_NAME="$(echo << parameters.family >>)"
              fi
              DEPLOYED_REVISION=$(aws ecs update-service \
                  --cluster "<< parameters.cluster-name >>" \
                  --service "${SERVICE_NAME}" \
                  --task-definition "${CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN}" \
                  --output text \
                  --query service.taskDefinition)
            fi
            echo "export CCI_ORB_AWS_ECS_DEPLOYED_REVISION='${DEPLOYED_REVISION}'" >> $BASH_ENV
      - when:
          condition: << parameters.verify-revision-is-deployed >>
          steps:
            - verify-revision-is-deployed:
                family: << parameters.family >>
                cluster-name: << parameters.cluster-name >>
                service-name: << parameters.service-name >>
                task-definition-arn: "$CCI_ORB_AWS_ECS_DEPLOYED_REVISION"
                max-poll-attempts: << parameters.max-poll-attempts >>
                poll-interval: << parameters.poll-interval >>
                fail-on-verification-timeout: << parameters.fail-on-verification-timeout >>
  run-task:
    description: |
      Starts a new ECS task using the specified
      task definition and other parameters.
    parameters:
      cluster:
        description:
          "The name or ARN of the cluster on which to run the task."
        type: string
      task-definition:
        description: |
          "The family and revision (family:revision) or full ARN of the task
          definition to run. If a revision is not specified, the latest ACTIVE
          revision is used."
        type: string
      count:
        description: |
          "The number of instantiations of the specified task to place on your
          cluster. You can specify up to 10 tasks per call."
        type: integer
        default: 1
      started-by:
        description: |
          An optional tag specified when a task is started. For example, if
          you automatically trigger a task to run a batch process job, you
          could apply a unique identifier for that job to your task with the
          startedBy parameter. You can then identify which tasks belong to
          that job by filtering the results of a ListTasks call with the
          startedBy value. Up to 36 letters (uppercase and lowercase), num-
          bers, hyphens, and underscores are allowed.
        type: string
        default: ""
      group:
        description: |
          The name of the task group to associate with the task.
          The default value is the family name of the task definition
          (for example, family:my-family-name).
        type: string
        default: ""
      placement-constraints:
        description: |
          "An array of placement constraint objects to use for the task. You
          can specify up to 10 constraints per task (including constraints in
          the task definition and those specified at runtime).
          Expected format: type=string,field=string."
        type: string
        default: ""
      placement-strategy:
        description: |
          "The placement strategy objects to use for the task. You can specify
          a maximum of five strategy rules per task.
          Expected format: type=string,field=string."
        type: string
        default: ""
      launch-type:
        description: |
          The launch type on which to run your task. For more information, see
          Amazon ECS Launch Types in the Amazon Elastic Container Service
          Developer Guide. Possible values EC2, FARGATE.
        type: enum
        enum: ["FARGATE", "EC2"]
        default: "FARGATE"
      platform-version:
        description: |
          "The platform version the task should run. A platform version is only
          specified for tasks using the Fargate launch type."
        type: string
        default: "LATEST"
      awsvpc:
        description: |
          "Does your task defintion use awsvpc mode or not. If so,
          this should be true and you should also include subnet-ids
          and optionally security-group-ids / assign-public-ips."
        type: boolean
        default: true
      subnet-ids:
        description: |
          "List of subnet ids separated by commas.
          Expected Format: subnet-70faa93b,subnet-bcc54b93"
        type: string
        default: ""
      security-group-ids:
        description: |
          "List of security group ids separated by commas.
          Expected Format: sg-010a460f7f442fa75,sg-010a420f7faa5fa75"
        type: string
        default: ""
      assign-public-ip:
        description: |
          "Assign a public IP or not"
        type: enum
        enum: ["ENABLED", "DISABLED"]
        default: "DISABLED"
      tags:
        description: |
          "The metadata that you apply to the task to help you categorize and
          organize them. Each tag consists of a key and an optional value,
          both of which you define. Expected format: key=string,value=string."
        type: string
        default: ""
      enable-ecs-managed-tags:
        description: |
          "Specifies whether to enable Amazon ECS managed tags for the task."
        type: boolean
        default: false
      propagate-tags:
        description: |
          "Specifies whether to propagate the tags from the task definition to
          the task. If no value is specified, the tags are not propagated.
          Tags can only be propagated to the task during task creation. To add
          tags to a task after task creation, use the TagResource API action."
        type: boolean
        default: false
    steps:
      - run:
          name: Run Task
          command: |
            if [ "<<parameters.launch-type>>" == "FARGATE" ]; then
                echo "Setting --platform-version"
                set -- "$@" --platform-version "<<parameters.platform-version>>"
            fi
            if [ ! -z "<<parameters.started-by>>" ]; then
                echo "Setting --started-by"
                set -- "$@" --started-by "<<parameters.started-by>>"
            fi
            if [ ! -z "<<parameters.group>>" ]; then
                echo "Setting --group"
                set -- "$@" --group "<<parameters.group>>"
            fi
            if [ ! -z "<<parameters.tags>>" ]; then
                echo "Setting --tags"
                set -- "$@" --tags "<<parameters.tags>>"
            fi
            if [ ! -z "<<parameters.placement-constraints>>" ]; then
                echo "Setting --placement-constraints"
                set -- "$@" --placement-constraints "<<parameters.placement-constraints>>"
            fi
            if [ ! -z "<<parameters.placement-strategy>>" ]; then
                echo "Setting --placement-strategy"
                set -- "$@" --placement-strategy "<<parameters.placement-strategy>>"
            fi
            if [ "<<parameters.enable-ecs-managed-tags>>" == "true" ]; then
                echo "Setting --enable-ecs-managed-tags"
                set -- "$@" --enable-ecs-managed-tags
            fi
            if [ "<<parameters.propagate-tags>>" == "true" ]; then
                echo "Setting --propagate-tags"
                set -- "$@" --propagate-tags "TASK_DEFINITION"
            fi
            if [ "<<parameters.awsvpc>>" == "true" ]; then
                echo "Setting --network-configuration"
                set -- "$@" --network-configuration awsvpcConfiguration="{subnets=[<<parameters.subnet-ids>>],securityGroups=[<<parameters.security-group-ids>>],assignPublicIp=<<parameters.assign-public-ip>>}"
            fi

            aws ecs run-task \
              --cluster <<parameters.cluster>> \
              --task-definition <<parameters.task-definition>> \
              --count <<parameters.count>> \
              --launch-type <<parameters.launch-type>> \
              "$@"
