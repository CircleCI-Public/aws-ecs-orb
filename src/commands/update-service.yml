description: >
  Registers a task definition for the given ECS service and updates the
  service to use it. Optionally polls the status of the deployment until the created task
  definition revision has reached its desired running task count and is the only
  revision deployed for the service.

parameters:
  cluster-name:
    description: The short name or full ARN of the cluster that hosts the service.
    type: string
  codedeploy-application-name:
    default: ''
    description: >
      The name of the AWS CodeDeploy application used for the deployment.
      Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
    type: string
  codedeploy-deployment-group-name:
    default: ''
    description: >
      The name of the AWS CodeDeploy deployment group used for the deployment.
      Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
    type: string
  codedeploy-load-balanced-container-name:
    default: ''
    description: >
      The name of the container to be load-balanced via AWS CodeDeploy.
      Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
    type: string
  codedeploy-load-balanced-container-port:
    default: 80
    description: >
      The port of the container to be load-balanced via AWS CodeDeploy.
      Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
    type: integer
  container-env-var-updates:
    default: ''
    description: >
      Use this to update or set the values of environment variables that 
      will be defined for the containers. (Existing environment variables not
      included in this parameter will not be removed)
      Expected format: container=<container-name>,name=<env-var-name>,value=<env-var-value>,container=...,name=...,value=...,
      Values should not contain commas.
    type: string
  container-image-name-updates:
    default: ''
    description: >
      Use this to update the Docker image names and/or tag names of existing
      containers that had been defined in the previous task definition.
      Expected format: container=<container-name>,image-and-tag=<image-name>:<tag-name>|image=<image-name>|tag=<tag-name>,container=...,image-and-tag|image|tag=...,
      For each container, specify only either "image-and-tag" or "image" or "tag".
      If "image-and-tag" is specified, the container image will be updated to the
      value of the name-value pair.
      If "image" is specified, the image tag defined in the previous task definition
      will be retained, if exists.
      If "tag" is specified, the image name defined in the previous task definition
      will be used.
    type: string
  deployment-controller:
    default: ECS
    description: The deployment controller to use for the service. Defaulted to ECS
    enum:
      - ECS
      - CODE_DEPLOY
    type: enum
  fail-on-verification-timeout:
    default: true
    description: >
      Whether to exit with an error if the verification of the deployment
      status does not complete within the number of polling attempts.
      Only in use when verify-revision-is-deployed is set to true.
    type: boolean
  family:
    description: Name of the task definition's family.
    type: string
  force-new-deployment:
    default: false
    description: >
      Whether to force a new deployment of the service.
      Not applicable to ECS services that are of the Blue/Green Deployment type.
    type: boolean
  max-poll-attempts:
    default: 50
    description: >
      The maximum number of attempts to poll the deployment status before
      giving up.
      Only in use when verify-revision-is-deployed is set to true.
    type: integer
  poll-interval:
    default: 20
    description: >
      The polling interval, in seconds.
      Only in use when verify-revision-is-deployed is set to true.
    type: integer
  service-name:
    default: ''
    description: > 
      The name of the service to update. If undefined, we assume `family`
      is the name of both the service and task definition.
    type: string
  skip-task-definition-registration:
    default: false
    description: Whether to skip registration of a new task definition.
    type: boolean
  verification-timeout:
    default: 10m
    description: >
      The maximum amount of time to wait for a blue/green deployment to
      complete before timing out.
      Only in use when the deployment controller is the blue/green deployment type.
    type: string
  verify-revision-is-deployed:
    default: false
    description: >
      Runs the verify-revision-is-deployed Orb command to verify that
      the revision has been deployed and is the only deployed revision
      for the service. Note: enabling this may result in the build
      being marked as failed if tasks for older revisions fail to be stopped
      before the max number of polling attempts is reached.
    type: boolean

steps:
  - unless:
      condition: << parameters.skip-task-definition-registration >>
      steps:
        - update-task-definition:
            container-env-var-updates: << parameters.container-env-var-updates >>
            container-image-name-updates: << parameters.container-image-name-updates >>
            family: << parameters.family >>
  - when:
      condition: << parameters.skip-task-definition-registration >>
      steps:
        - run:
            command: "TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \\\n  --task-definition\
              \ << parameters.family >> \\\n  --output text \\\n  --query 'taskDefinition.taskDefinitionArn')\n\
              echo \"export CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN='${TASK_DEFINITION_ARN}'\"\
              \ >> $BASH_ENV\n"
            name: Retrieve previous task definition
  - when:
      condition:
        equal:
          - CODE_DEPLOY
          - << parameters.deployment-controller >>
      no_output_timeout: << parameters.verification-timeout >>
      steps:
        - run:
            command: <<include(scripts/code-deploy.sh)>>
            name: Update ECS Blue/Green service with registered task definition.
  - when:
      condition:
        equal:
          - ECS
          - << parameters.deployment-controller >>
      steps:
        - run:
            command: <<include(scripts/ecs-deploy.sh)>>
            name: Update service with registered task definition
  - when:
      condition:
        and:
          - << parameters.verify-revision-is-deployed >>
          - equal:
            - ECS
            - << parameters.deployment-controller >>
      steps:
        - verify-revision-is-deployed:
            cluster-name: << parameters.cluster-name >>
            fail-on-verification-timeout: << parameters.fail-on-verification-timeout >>
            family: << parameters.family >>
            max-poll-attempts: << parameters.max-poll-attempts >>
            poll-interval: << parameters.poll-interval >>
            service-name: << parameters.service-name >>
            task-definition-arn: $CCI_ORB_AWS_ECS_DEPLOYED_REVISION
