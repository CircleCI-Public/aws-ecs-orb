description: >
  Registers a task definition for the given ECS service and updates the service to use it. Optionally polls the status of the deployment until the created task definition revision has reached its desired running task count and is the only revision deployed for the service.
parameters:
  family:
    description: Name of the task definition's family.
    type: string
  cluster-name:
    description: The short name or full ARN of the cluster that hosts the service.
    type: string
  service-name:
    description: >-
      The name of the service to update. If undefined, we assume `family` is the
      name of both the service and task definition.
    type: string
    default: ''
  deployment-controller:
    description: The deployment controller to use for the service. Defaulted to ECS
    type: enum
    enum:
      - ECS
      - CODE_DEPLOY
    default: ECS
  codedeploy-application-name:
    description: >
      The name of the AWS CodeDeploy application used for the deployment.
      Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
    type: string
    default: ''
  codedeploy-deployment-group-name:
    description: >
      The name of the AWS CodeDeploy deployment group used for the deployment.
      Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
    type: string
    default: ''
  codedeploy-load-balanced-container-name:
    description: >
      The name of the container to be load-balanced via AWS CodeDeploy.
      Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
    type: string
    default: ''
  codedeploy-load-balanced-container-port:
    description: >
      The port of the container to be load-balanced via AWS CodeDeploy.
      Only effective when the deployment-controller parameter value is "CODE_DEPLOY".
    type: integer
    default: 80
  container-image-name-updates:
    description: >
      Use this to update the Docker image names and/or tag names of existing containers that had been defined in the previous task definition.

      Expected format:
      container=<container-name>,image-and-tag=<image-name>:<tag-name>|image=<image-name>|tag=<tag-name>,container=...,image-and-tag|image|tag=...,

      For each container, specify only either "image-and-tag" or "image" or "tag".

      If "image-and-tag" is specified, the container image will be updated to the value of the name-value pair.
      If "image" is specified, the image tag defined in the previous task definition will be retained, if exists.
      If "tag" is specified, the image name defined in the previous task definition will be used.
    type: string
    default: ''
  container-env-var-updates:
    description: >
      Use this to update or set the values of environment variables that will be defined for the containers.
      (Existing environment variables not included in this parameter will not be removed)

      Expected format:
      container=<container-name>,name=<env-var-name>,value=<env-var-value>,container=...,name=...,value=...,

      Values should not contain commas.
    type: string
    default: ''
  force-new-deployment:
    description: |
      Whether to force a new deployment of the service.
      Not applicable to ECS services that are of the Blue/Green Deployment type.
    type: boolean
    default: false
  enable-circuit-breaker:
    description: |
      Determines whether a service deployment will fail if the service can't reach a steady state.
      To use the deployment circuit breaker for CodeDeploy services, the verify-revision-is-deployed parameter must be set to true.
    type: boolean
    default: false
  verify-revision-is-deployed:
    description: |
      Runs the verify-revision-is-deployed Orb command to verify that the revision has been deployed and is the only deployed revision for the service.

      Note: enabling this may result in the build being marked as failed if tasks for older revisions fail to be stopped before the max number of polling attempts is reached.
    type: boolean
    default: false
  verification-timeout:
    description: >
      The maximum amount of time to wait for a blue/green deployment to complete before timing out.

      Only in use when the deployment controller is the blue/green deployment type.
    type: string
    default: 10m
  max-poll-attempts:
    description: >
      The maximum number of attempts to poll the deployment status before giving up.
      Only in use when verify-revision-is-deployed is set to true.
    type: integer
    default: 50
  poll-interval:
    description: |
      The polling interval, in seconds.
      Only in use when verify-revision-is-deployed is set to true.
    type: integer
    default: 20
  fail-on-verification-timeout:
    description: |
      Whether to exit with an error if the verification of the deployment status does not complete within the number of polling attempts.
      Only in use when verify-revision-is-deployed is set to true.
    type: boolean
    default: true
  skip-task-definition-registration:
    description: |
      Whether to skip registration of a new task definition.
    type: boolean
    default: false
  task-definition-tags:
    description: >
      The metadata that you apply to the task definition to help you categorize and organize them.
      Each tag consists of a key and an optional value, both of which you define.

      (Existing environment variables not included in this parameter will not be removed)

      Expected formats:
        - Shorthand Syntax
          key=string,value=string ...
        - JSON Syntax
         [{"key": "string","value": "string"} ... ]

      Values should not contain commas.
    type: string
    default: ''
  profile-name:
    description: AWS profile name to be configured.
    type: string
    default: ''

steps:
  - unless:
      condition: << parameters.skip-task-definition-registration >>
      steps:
        - update-task-definition:
            family: << parameters.family >>
            container-image-name-updates: << parameters.container-image-name-updates >>
            container-env-var-updates: << parameters.container-env-var-updates >>
  - when:
      condition: << parameters.skip-task-definition-registration >>
      steps:
        - run:
            name: Retrieve previous task definition
            command: >
              TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
                --task-definition << parameters.family >> \
                --output text \
                --query 'taskDefinition.taskDefinitionArn' \
                --profile=<< parameters.profile-name >>)
              echo "export CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN='${TASK_DEFINITION_ARN}'" >> $BASH_ENV
  - when:
      condition: << parameters.task-definition-tags >>
      steps:
        - run:
            name: Update task definition with additional tags
            command: >
              aws ecs tag-resource \
                --resource-arn ${CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN} \
                --tags <<parameters.task-definition-tags>> \
                --profile=<< parameters.profile-name >>
  - when:
      condition:
        equal:
          - CODE_DEPLOY
          - << parameters.deployment-controller >>
      steps:
        - run:
            name: Update ECS Blue/Green service with registered task definition.
            command: <<include(scripts/update-bluegreen-service-via-task-def.sh)>>
            environment:
              DEPLOYMENT_CONTROLLER: <<parameters.deployment-controller>>
              ECS_PARAM_CD_APP_NAME: <<parameters.codedeploy-application-name>>
              ECS_PARAM_CD_DEPLOY_GROUP_NAME: <<parameters.codedeploy-deployment-group-name>>
              ECS_PARAM_CD_LOAD_BALANCED_CONTAINER_NAME: <<parameters.codedeploy-load-balanced-container-name>>
              ECS_PARAM_CD_LOAD_BALANCED_CONTAINER_PORT: <<parameters.codedeploy-load-balanced-container-port>>
              ECS_PARAM_VERIFY_REV_DEPLOY: <<parameters.verify-revision-is-deployed>>
              ECS_PARAM_PROFILE_NAME: <<parameters.profile-name>>
              ECS_PARAM_ENABLE_CIRCUIT_BREAKER: <<parameters.enable-circuit-breaker>>

      no_output_timeout: << parameters.verification-timeout >>
  - when:
      condition:
        equal:
          - ECS
          - << parameters.deployment-controller >>
      steps:
        - run:
            name: Update service with registered task definition
            command: <<include(scripts/update-service-via-task-def.sh)>>
            environment:
              ECS_PARAM_SERVICE_NAME: <<parameters.service-name>>
              ECS_PARAM_FAMILY: <<parameters.family>>
              ECS_PARAM_FORCE_NEW_DEPLOY: <<parameters.force-new-deployment>>
              ECS_PARAM_CLUSTER_NAME: <<parameters.cluster-name>>
              ECS_PARAM_PROFILE_NAME: <<parameters.profile-name>>
              ECS_PARAM_ENABLE_CIRCUIT_BREAKER: <<parameters.enable-circuit-breaker>>

  - when:
      condition:
        and:
          - << parameters.verify-revision-is-deployed >>
          - equal:
              - ECS
              - << parameters.deployment-controller >>
      steps:
        - verify-revision-is-deployed:
            family: << parameters.family >>
            cluster-name: << parameters.cluster-name >>
            service-name: << parameters.service-name >>
            task-definition-arn: $CCI_ORB_AWS_ECS_DEPLOYED_REVISION
            max-poll-attempts: << parameters.max-poll-attempts >>
            poll-interval: << parameters.poll-interval >>
            fail-on-verification-timeout: << parameters.fail-on-verification-timeout >>
            profile-name: << parameters.profile-name >>
