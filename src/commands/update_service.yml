description: >
  Registers a task definition for the given ECS service and updates the service to use it. Optionally polls the status of the deployment until the created task definition revision has reached its desired running task count and is the only revision deployed for the service.
parameters:
  family:
    description: Name of the task definition's family.
    type: string
  cluster:
    description: The short name or full ARN of the cluster that hosts the service.
    type: string
  service_name:
    description: >-
      The name of the service to update. If undefined, we assume `family` is the
      name of both the service and task definition.
    type: string
    default: ''
  deployment_controller:
    description: The deployment controller to use for the service. Defaulted to ECS
    type: enum
    enum:
      - ECS
      - CODE_DEPLOY
    default: ECS
  codedeploy_application_name:
    description: >
      The name of the AWS CodeDeploy application used for the deployment.
      Only effective when the deployment_controller parameter value is "CODE_DEPLOY".
    type: string
    default: ''
  codedeploy_deployment_group_name:
    description: >
      The name of the AWS CodeDeploy deployment group used for the deployment.
      Only effective when the deployment_controller parameter value is "CODE_DEPLOY".
    type: string
    default: ''
  codedeploy_load_balanced_container_name:
    description: >
      The name of the container to be load-balanced via AWS CodeDeploy.
      Only effective when the deployment_controller parameter value is "CODE_DEPLOY".
    type: string
    default: ''
  codedeploy_load_balanced_container_port:
    description: >
      The port of the container to be load-balanced via AWS CodeDeploy.
      Only effective when the deployment_controller parameter value is "CODE_DEPLOY".
    type: integer
    default: 80
  container_image_name_updates:
    description: >
      Use this to update the Docker image names and/or tag names of existing containers that had been defined in the previous task definition.

      Expected format:
      container=<container-name>,image-and-tag=<image-name>:<tag-name>|image=<image-name>|tag=<tag-name>,container=...,image-and-tag|image|tag=...,

      For each container, specify only either "image-and-tag" or "image" or "tag".

      If "image-and-tag" is specified, the container image will be updated to the value of the name-value pair.
      If "image" is specified, the image tag defined in the previous task definition will be retained, if exists.
      If "tag" is specified, the image name defined in the previous task definition will be used.
    type: string
    default: ''
  container_env_var_updates:
    description: >
      Use this to update or set the values of environment variables that will be defined for the containers.
      (Existing environment variables not included in this parameter will not be removed)

      Expected format:
      container=<container-name>,name=<env-var-name>,value=<env-var-value>,container=...,name=...,value=...,

      Values should not contain commas.
    type: string
    default: ''
  container_secret_updates:
    description: >
      Use this to update or set the values of secret variables that will be defined for the containers.
      (Existing secrets variables not included in this parameter will not be removed)

      Expected format:
      container=<container-name>,name=<env-var-name>,valueFrom=<env-var-value>,container=...,name=...,valueFrom=...,

      Values should not contain commas.
    type: string
    default: ''
  container_docker_label_updates:
    description: >
      Use this to update or set the values of docker label variables that will be defined for the containers.
      (Existing secrets variables not included in this parameter will not be removed)

      Expected format:
      container=<container-name>,<key>=<env-var-name>,<key>=<env-var-value>,container=...,<key>=...,<key>=...,

      Values should not contain commas.
    type: string
    default: ''
  force_new_deployment:
    description: |
      Whether to force a new deployment of the service.
      Not applicable to ECS services that are of the Blue/Green Deployment type.
    type: boolean
    default: false
  enable_circuit_breaker:
    description: |
      Determines whether a service deployment will fail if the service can't reach a steady state.
      To use the deployment circuit breaker for CodeDeploy services, the verify_revision_is_deployed parameter must be set to true.
    type: boolean
    default: false
  verify_revision_is_deployed:
    description: |
      Runs the verify_revision_is_deployed Orb command to verify that the revision has been deployed and is the only deployed revision for the service.

      Note: enabling this may result in the build being marked as failed if tasks for older revisions fail to be stopped before the max number of polling attempts is reached.
    type: boolean
    default: false
  verification_timeout:
    description: >
      The maximum amount of time to wait for a blue/green deployment to complete before timing out.

      Only in use when the deployment controller is the blue/green deployment type.
    type: string
    default: 10m
  max_poll_attempts:
    description: >
      The maximum number of attempts to poll the deployment status before giving up.
      Only in use when verify_revision_is_deployed is set to true.
    type: integer
    default: 50
  poll_interval:
    description: |
      The polling interval, in seconds.
      Only in use when verify_revision_is_deployed is set to true.
    type: integer
    default: 20
  fail_on_verification_timeout:
    description: |
      Whether to exit with an error if the verification of the deployment status does not complete within the number of polling attempts.
      Only in use when verify_revision_is_deployed is set to true.
    type: boolean
    default: true
  skip_task_definition_registration:
    description: |
      Whether to skip registration of a new task definition.
    type: boolean
    default: false
  task_definition_tags:
    description: >
      The metadata that you apply to the task definition to help you categorize and organize them.
      Each tag consists of a key and an optional value, both of which you define.

      (Existing environment variables not included in this parameter will not be removed)

      Expected formats:
        - Shorthand Syntax
          key=string,value=string ...
        - JSON Syntax
         [{"key": "string","value": "string"} ... ]

      Values should not contain commas.
    type: string
    default: ''
  profile_name:
    description: AWS profile name to be configured.
    type: string
    default: "default"
  codedeploy_capacity_provider_name:
    description: >
      The name of AWS Capacity Provider to be added to CodeDeploy deployment.
      Must be used with capacity-provider-base and capacity-provider-weight.
    type: string
    default: ''
  codedeploy_capacity_provider_base:
    description: >
      The base of AWS Capacity Provider to be added to CodeDeploy deployment.
      Must be used with codedeploy_capacity_provider_name and codedeploy_capacity_provider_weight.
    type: string
    default: ''
  codedeploy_capacity_provider_weight:
    description: >
      The weight of AWS Capacity Provider to be added to CodeDeploy deployment. Weight must be greater than 0.
      Must be used with codedeploy_capacity_provider_name and codedeploy_capacity_provider_base.
    type: string
    default: ''
  deployment_config_name:
    description: >
      The name of a CODE DEPLOY deployment configuration associated with the IAM user or AWS account.
      If not specified, the value configured in the deployment group is used as the default.
    type: string
    default: ''

steps:
  - unless:
      condition: << parameters.skip_task_definition_registration >>
      steps:
        - update_task_definition:
            family: << parameters.family >>
            container_image_name_updates: << parameters.container_image_name_updates >>
            container_env_var_updates: << parameters.container_env_var_updates >>
            container_secret_updates: << parameters.container_secret_updates >>
            container_docker_label_updates: << parameters.container_docker_label_updates >>
            profile_name: << parameters.profile_name >>
  - when:
      condition: << parameters.skip_task_definition_registration >>
      steps:
        - run:
            name: Retrieve previous task definition
            command: >
              TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
                --task-definition << parameters.family >> \
                --output text \
                --query 'taskDefinition.taskDefinitionArn' \
                --profile=<< parameters.profile_name >>)
              echo "export CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN='${TASK_DEFINITION_ARN}'" >> $BASH_ENV
  - when:
      condition: << parameters.task_definition_tags >>
      steps:
        - run:
            name: Update task definition with additional tags
            command: >
              aws ecs tag-resource \
                --resource-arn ${CCI_ORB_AWS_ECS_REGISTERED_TASK_DFN} \
                --tags <<parameters.task_definition_tags>> \
                --profile=<< parameters.profile_name >>
  - when:
      condition:
        equal:
          - CODE_DEPLOY
          - << parameters.deployment_controller >>
      steps:
        - run:
            name: Update ECS Blue/Green service with registered task definition.
            command: <<include(scripts/update_bluegreen_service_via_task_def.sh)>>
            no_output_timeout: << parameters.verification_timeout >>
            environment:
              DEPLOYMENT_CONTROLLER: <<parameters.deployment_controller>>
              ORB_STR_CD_APP_NAME: <<parameters.codedeploy_application_name>>
              ORB_STR_CD_DEPLOY_GROUP_NAME: <<parameters.codedeploy_deployment_group_name>>
              ORB_STR_CD_LOAD_BALANCED_CONTAINER_NAME: <<parameters.codedeploy_load_balanced_container_name>>
              ORB_INT_CD_LOAD_BALANCED_CONTAINER_PORT: <<parameters.codedeploy_load_balanced_container_port>>
              ORB_BOOL_VERIFY_REV_DEPLOY: <<parameters.verify_revision_is_deployed>>
              ORB_STR_PROFILE_NAME: <<parameters.profile_name>>
              ORB_BOOL_ENABLE_CIRCUIT_BREAKER: <<parameters.enable_circuit_breaker>>
              ORB_STR_CD_CAPACITY_PROVIDER_NAME: <<parameters.codedeploy_capacity_provider_name>>
              ORB_STR_CD_CAPACITY_PROVIDER_WEIGHT: <<parameters.codedeploy_capacity_provider_weight>>
              ORB_STR_CD_CAPACITY_PROVIDER_BASE: <<parameters.codedeploy_capacity_provider_base>>
              ORB_STR_CD_DEPLOYMENT_CONFIG_NAME: <<parameters.deployment_config_name>>

  - when:
      condition:
        equal:
          - ECS
          - << parameters.deployment_controller >>
      steps:
        - run:
            name: Update service with registered task definition
            command: <<include(scripts/update_service_via_task_def.sh)>>
            environment:
              ORB_STR_SERVICE_NAME: <<parameters.service_name>>
              ORB_STR_FAMILY: <<parameters.family>>
              ORB_BOOL_FORCE_NEW_DEPLOY: <<parameters.force_new_deployment>>
              ORB_STR_CLUSTER_NAME: <<parameters.cluster>>
              ORB_STR_PROFILE_NAME: <<parameters.profile_name>>
              ORB_BOOL_ENABLE_CIRCUIT_BREAKER: <<parameters.enable_circuit_breaker>>

  - when:
      condition:
        and:
          - << parameters.verify_revision_is_deployed >>
          - equal:
              - ECS
              - << parameters.deployment_controller >>
      steps:
        - verify_revision_is_deployed:
            family: << parameters.family >>
            cluster: << parameters.cluster >>
            service_name: << parameters.service_name >>
            task_definition_arn: $CCI_ORB_AWS_ECS_DEPLOYED_REVISION
            max_poll_attempts: << parameters.max_poll_attempts >>
            poll_interval: << parameters.poll_interval >>
            fail_on_verification_timeout: << parameters.fail_on_verification_timeout >>
            profile_name: << parameters.profile_name >>
