version: 2.1
orbs:
  orb-tools: circleci/orb-tools@12.1
  aws-cli: circleci/aws-cli@4.1
  jq: circleci/jq@3.0
  aws-ecs: {}
filters: &filters
  tags:
    only: /.*/
release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
jobs:
  pytest:
    docker:
      - image: cimg/python:3.10.4
    steps:
      - checkout
      - restore_cache:
          keys:
            - cache-{{ checksum "Pipfile.lock" }}
      - run:
          name: Install Python dependencies
          command: |
            pipenv sync --dev
      - run:
          name: Run unit tests
          command: |
            cd src/scripts
            pipenv run pylint --py3k *.py
            pipenv run coverage run --source . -m pytest
            pipenv run coverage report --omit "*/test*"
      - save_cache:
          key: cache-{{ checksum "Pipfile.lock" }}
          paths:
            - ~/.local
            - ~/.cache
  test-fargatespot:
    docker:
      - image: cimg/base:current
    parameters:
      profile_name:
        type: string
        default: 'default'
      role_arn:
        type: string
        default: ''
    steps:
      - aws-cli/setup:
          profile_name: << parameters.profile_name >>
          role_arn: << parameters.role_arn >>
      - jq/install
      - run:
          name: Get cluster info
          command: |
            SERVICES_OBJ=$(aws ecs describe-services --cluster "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-cluster" --services "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service")
            VPC_CONF_OBJ=$(echo $SERVICES_OBJ | jq '.services[].networkConfiguration.awsvpcConfiguration')
            SUBNET_ONE=$(echo "$VPC_CONF_OBJ" |  jq '.subnets[0]')
            SUBNET_TWO=$(echo "$VPC_CONF_OBJ" |  jq '.subnets[1]')
            SECURITY_GROUP_IDS=$(echo "$VPC_CONF_OBJ" |  jq '.securityGroups[0]')
            CLUSTER_NAME=$(echo "$SERVICES_OBJ" |  jq '.services[].clusterArn')
            echo "export SUBNET_ONE=$SUBNET_ONE" >> $BASH_ENV
            echo "export SUBNET_TWO=$SUBNET_TWO" >> $BASH_ENV
            echo "export SECURITY_GROUP_IDS_FETCHED=$SECURITY_GROUP_IDS_FETCHED" >> $BASH_ENV
            echo "export CLUSTER_NAME=$CLUSTER_NAME" >> $BASH_ENV
      - run:
          name: Associate cluster
          command: |
            aws ecs put-cluster-capacity-providers \
              --cluster "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-cluster" \
              --capacity-providers FARGATE FARGATE_SPOT  \
              --default-capacity-provider-strategy capacityProvider=FARGATE,weight=1 \
              --region ${AWS_DEFAULT_REGION}
      - run:
          name: Register task definition
          command: |
            aws ecs register-task-definition \
              --family ecs-orb-fgs-1-sleep360 \
              --cpu 256 --memory 512 \
              --requires-compatibilities FARGATE \
              --network-mode awsvpc \
              --container-definitions "[{\"name\":\"sleep\",\"image\":\"busybox\",\"command\":[\"sleep\",\"360\"],\"memory\":256,\"essential\":true}]"
      - aws-ecs/run_task:
          cluster: $CLUSTER_NAME
          capacity_provider_strategy: capacityProvider=FARGATE,weight=1 capacityProvider=FARGATE_SPOT,weight=1
          launch_type: ""
          task_definition: ecs-orb-fgs-1-sleep360
          subnet_ids: '$SUBNET_ONE, $SUBNET_TWO'
          security_group_ids: $SECURITY_GROUP_IDS_FETCHED
  build-test-app:
    docker:
      - image: cimg/go:1.19
    parameters:
      docker-image-namespace:
        description: "The namespace in which the built Docker image will be published"
        type: string
      docker-image-name:
        description: "The name for the built Docker image"
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Make the executable
          command: |
            cd tests/test_app
            go build -o demo-app src/main.go
      - run:
          name: Build image
          command: |
            cd tests/test_app
            docker build -t <<parameters.docker-image-namespace>>/<<parameters.docker-image-name>> .
      - run:
          name: Test image
          command: |
            set -x
            docker run -d -p 8080:80 --name built-image <<parameters.docker-image-namespace>>/<<parameters.docker-image-name>>
            sleep 10
            docker run --network container:built-image appropriate/curl --retry 10 --retry-connrefused http://localhost:80 | grep "Hello World!"
            set +x
      - run:
          name: Save image to an archive
          command: |
            mkdir -p docker-images/<<parameters.docker-image-name>>
            set -x
            docker save -o docker-images/<<parameters.docker-image-name>>/<<parameters.docker-image-name>>.tar <<parameters.docker-image-namespace>>/<<parameters.docker-image-name>>
            set +x
      - persist_to_workspace:
          root: .
          paths:
            - docker-images
  set-up-test-env:
    parameters:
      terraform-image:
        type: string
        default: "hashicorp/terraform:1.4.0"
      aws-resource-name-prefix:
        type: string
      terraform-config-dir:
        type: string
      profile_name:
        type: string
        default: 'default'
      role_arn:
        type: string
        default: ''
      skip-creation-env:
        type: boolean
        default: false
    docker:
      - image: << parameters.terraform-image >>
    steps:
      - run:
          name: Check if test env should be set up
          environment:
            SKIP_TEST_ENV_CREATION: <<parameters.skip-creation-env>>
          command: |
            if [ "${SKIP_TEST_ENV_CREATION}" = "true" ]
            then
              circleci step halt
            fi
      - checkout
      - aws-cli/setup:
          profile_name: << parameters.profile_name >>
          role_arn: << parameters.role_arn >>
      - run:
          name: terraform init
          command: |
            set -x
            cd << parameters.terraform-config-dir >>
            terraform init -input=false
            set +x
      - run:
          name: terraform plan
          command: |
            cd << parameters.terraform-config-dir >>
            set -x
            terraform plan \
                -input=false \
                -var "aws_region=${AWS_DEFAULT_REGION}" \
                -var "aws_account_id=${AWS_ACCOUNT_ID}" \
                -var "aws_resource_prefix=<< parameters.aws-resource-name-prefix >>" \
                -out tfplan
            set +x
      - run:
          name: terraform apply
          command: |
            set -x
            cd << parameters.terraform-config-dir >>
            terraform apply -input=false -auto-approve tfplan
            set +x
  test-service-update:
    docker:
      - image: cimg/python:3.10.4
    parameters:
      aws-resource-name-prefix:
        description: "Prefix that the AWS resources for this launch type share"
        type: string
      family_name:
        description: "Family name"
        type: string
      service_name:
        description: "Service name"
        type: string
      docker-image-namespace:
        description: "The namespace in which the Docker image was published"
        type: string
      docker-image-name:
        description: "The name for the previously built Docker image"
        type: string
      skip-service-update:
        description: "Skip updating the ECS service"
        type: boolean
        default: false
      profile_name:
        description: "The profile name to use for AWS credentials"
        type: string
        default: "default"
      role_arn:
        type: string
        default: ''
      secret_arn:
        type: string
        default: ''
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - aws-cli/setup:
          profile_name: << parameters.profile_name >>
          role_arn: << parameters.role_arn >>
      - run:
          name: Load image
          command: |
            docker load --input workspace/docker-images/<<parameters.docker-image-name>>/<<parameters.docker-image-name>>.tar
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="<< parameters.aws-resource-name-prefix >>"' >> $BASH_ENV
            echo 'export ECS_CLUSTER_NAME="<< parameters.aws-resource-name-prefix >>-cluster"' >> $BASH_ENV
            echo 'export ECS_SERVICE_NAME="<< parameters.aws-resource-name-prefix >>-service"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Push image
          command: |
            aws ecr get-login-password --region $AWS_DEFAULT_REGION --profile "<<parameters.profile_name>>" | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
            docker push $FULL_IMAGE_NAME
      - unless:
          condition: << parameters.skip-service-update >>
          steps:
            - aws-cli/setup:
                profile_name: << parameters.profile_name >>
                role_arn: << parameters.role_arn >>
            - aws-ecs/update_service:
                family: "<< parameters.family_name >>"
                service_name: "<< parameters.service_name >>"
                cluster: "<< parameters.aws-resource-name-prefix >>-cluster"
                container_image_name_updates: "container=<< parameters.aws-resource-name-prefix >>-service,image-and-tag=$FULL_IMAGE_NAME"
                container_env_var_updates: 'container=<< parameters.aws-resource-name-prefix >>-service,name=VERSION_INFO,value="${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}",container=<< parameters.aws-resource-name-prefix >>-service,name=BUILD_DATE,value=$(date)'
                container_secret_updates: 'container=<< parameters.aws-resource-name-prefix >>-service,name=test,valueFrom=<<parameters.secret_arn>>'
                verify_revision_is_deployed: true
                fail_on_verification_timeout: false
                profile_name: "<<parameters.profile_name>>"
            - test-deployment:
                service_name: "<< parameters.aws-resource-name-prefix >>-service"
                cluster: "<< parameters.aws-resource-name-prefix >>-cluster"
  test-task_definition-update:
    docker:
      - image: cimg/python:3.10.4
    parameters:
      family_name:
        description: "Family name"
        type: string
      profile_name:
        type: string
        default: 'default'
      role_arn:
        type: string
        default: ''
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: << parameters.profile_name >>
          role_arn: << parameters.role_arn >>
      - run:
          name: Get existing task definition
          command: |
            aws ecs describe-task-definition --task-definition << parameters.family_name >> \
              | jq '.taskDefinition' | jq '.memory = "3072"' \
              | jq 'del(.["taskDefinitionArn", "revision", "status", "requiresAttributes", "compatibilities", "registeredAt", "registeredBy"])' \
              > task_definition.json
      - aws-ecs/update_task_definition_from_json:
          task_definition_json: "task_definition.json"
      - run:
          name: Check if task definition was updated
          command: |
            aws ecs describe-task-definition --task-definition << parameters.family_name >> --include TAGS | grep "3072"
  set-up-run_task-test:
    docker:
      - image: cimg/python:3.10.4
    parameters:
      family_name:
        description: "Family name"
        type: string
      profile_name:
        description: "The profile name to use for AWS credentials"
        type: string
        default: "default"
      role_arn:
        type: string
        default: ''
    steps:
      - checkout
      - aws-cli/setup:
          role_arn: << parameters.role_arn >>
          profile_name: << parameters.profile_name >>
      - run:
          name: Register task definition
          command: |
            aws ecs register-task-definition \
              --family << parameters.family_name >> \
              --cpu 256 --memory 512 \
              --container-definitions "[{\"name\":\"sleep\",\"image\":\"busybox\",\"command\":[\"sleep\",\"360\"],\"memory\":256,\"essential\":true}]"
  tear-down-run_task-test:
    docker:
      - image: cimg/python:3.10.4
    parameters:
      family_name:
        description: "Family name"
        type: string
      profile_name:
        type: string
        default: 'default'
      role_arn:
        type: string
        default: ''
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: << parameters.profile_name >>
          role_arn: << parameters.role_arn >>
      - run:
          name: Deregister task definition
          command: |
            TASK_DEFINITION_ARN=$(aws ecs describe-task-definition \
              --task-definition << parameters.family_name >> | jq -r '.taskDefinition.taskDefinitionArn')
            aws ecs deregister-task-definition --task-definition ${TASK_DEFINITION_ARN}
  tear-down-test-env:
    parameters:
      terraform-image:
        type: string
        default: "hashicorp/terraform:1.4.0"
      aws-resource-name-prefix:
        type: string
      terraform-config-dir:
        type: string
      profile_name:
        type: string
        default: 'default'
      role_arn:
        type: string
        default: ''
      skip-teardown-env:
        type: boolean
        default: false
    docker:
      - image: << parameters.terraform-image >>
    steps:
      - run:
          name: Check if test env should be destroyed
          environment:
            SKIP_TEST_ENV_TEARDOWN: <<parameters.skip-teardown-env>>
          command: |
            if [ "${SKIP_TEST_ENV_TEARDOWN}" = "true" ]
            then
              circleci step halt
            fi
      - checkout
      - aws-cli/setup:
          profile_name: << parameters.profile_name >>
          role_arn: << parameters.role_arn >>
      - run:
          name: terraform init
          command: |
            cd << parameters.terraform-config-dir >>
            terraform init -input=false
      - run:
          name: Tear down test environment
          no_output_timeout: "20m"
          command: |-
            cd << parameters.terraform-config-dir >>
            echo "Destroying terraform"
            terraform destroy -input=false -auto-approve \
                -var "aws_region=${AWS_DEFAULT_REGION}" \
                -var "aws_account_id=${AWS_ACCOUNT_ID}" \
                -var "aws_resource_prefix=<< parameters.aws-resource-name-prefix >>"
  integration-test-ecs-cli-install:
    parameters:
      executor:
        type: executor
      version:
        description: Select a specific version of the AWS ECS CLI. By default the latest version will be used.
        default: latest
        type: string
      install_dir:
        type: string
        default: "/usr/local/bin/ecs-cli"
        description: |
          Specify the installation directory
      override_installed:
        type: boolean
        default: false
        description: Enable this to override the installed version and install your specified version.
    executor: <<parameters.executor>>
    steps:
      - aws-ecs/install_ecs_cli:
          version: <<parameters.version>>
          install_dir: <<parameters.install_dir>>
          override_installed: <<parameters.override_installed>>
workflows:
  test-deploy:
    jobs:
      # Make sure to include "filters: *filters" in every test job you want to run as part of your deployment.
      - integration-test-ecs-cli-install:
          version: "v1.9.0"
          matrix:
            parameters:
              executor: [linux, mac]
          filters: *filters
      #################
      # Fargate
      #################
      - tear-down-test-env:
          name: fargate_tear-down-test-env-initial
          filters: *filters
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate"
          context: [CPE-OIDC]
          role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"      
      - build-test-app:
          name: fargate_build-test-app
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}:${CIRCLE_SHA1}"
          context: [CPE-OIDC]
          requires:
            - fargate_tear-down-test-env-initial
          filters: *filters
      - set-up-test-env:
          name: fargate_set-up-test-env
          filters: *filters
          requires:
            - fargate_build-test-app
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate"
          context: [CPE-OIDC]
          role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
      - test-service-update:
          name: fargate_test-update_service-command
          filters: *filters
          requires:
            - fargate_set-up-test-env
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_FARGATE}
          family_name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
          service_name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}:${CIRCLE_SHA1}"
          secret_arn: "arn:aws:ssm:${AWS_DEFAULT_REGION}:${AWS_ACCOUNT_ID}:parameter/TestParameterFargateUpdate"
          context: [CPE-OIDC]
          role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
      - aws-ecs/deploy_service_update:
          name: fargate_test-update_service-job
          auth:
            - aws-cli/setup:
                role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
                profile_name: "ECS_TEST_PROFILE"
          filters: *filters
          requires:
            - fargate_test-update_service-command
          profile_name: "ECS_TEST_PROFILE"
          family: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
          cluster: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-cluster"
          container_env_var_updates: 'container=${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service,name=VERSION_INFO,value="${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}",container=${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service,name=BUILD_DATE,value=$(date)'
          # test the force_new_deployment flag
          force_new_deployment: true
          verify_revision_is_deployed: true
          max_poll_attempts: 40
          poll_interval: 10
          context: [CPE-OIDC]
          post-steps:
            - test-deployment:
                profile: "ECS_TEST_PROFILE"
                service_name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
                cluster: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-cluster"
      - aws-ecs/deploy_service_update:
          name: fargate_test-update_service-skip-registration
          auth:
            - aws-cli/setup:
                role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
                profile_name: "ECS_TEST_PROFILE"
          filters: *filters
          requires:
            - fargate_test-update_service-job
          profile_name: "ECS_TEST_PROFILE"
          family: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
          cluster: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-cluster"
          # test skipping registration of a new task definition
          skip_task_definition_registration: true
          # test the enable_circuit_breaker flag
          enable_circuit_breaker: true
          verify_revision_is_deployed: true
          max_poll_attempts: 40
          poll_interval: 10
          context: [CPE-OIDC]
      - tear-down-test-env:
          name: fargate_tear-down-test-env
          filters: *filters
          requires:
            - fargate_test-update_service-skip-registration
            - test-fargatespot
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate"
          context: [CPE-OIDC]
          role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
      # #################
      # # EC2
      # #################
      - aws-ecs/deploy_service_update:
          filters: *filters
          auth:
            - aws-cli/setup:
                  profile_name: profile-create
          cluster: ecs-orb-ec2-1-cluster
          task_definition: "ecs-orb-ec2-1-family"
          service_name: test-create
          subnets: subnet-0ac33b77a1409cab5,subnet-06ab605c9f6211389
          security_groups: sg-01476d3bddd6779e7
          desired_count: 2
          target_group: arn:aws:elasticloadbalancing:us-west-2:122211685980:targetgroup/ecs-orb-ec2-1-service/5cfc7471d907d25d
          container_name: ecs-orb-ec2-1-service
          container_port: 80
          profile: profile-create
      # - tear-down-test-env:
      #     name: ec2_tear-down-test-env-initial
      #     filters: *filters
      #     aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_EC2}
      #     terraform-config-dir: "tests/terraform_setup/ec2"
      #     context: [CPE-OIDC]
      #     role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
      # - build-test-app:
      #     name: ec2_build-test-app
      #     docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
      #     docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}:${CIRCLE_SHA1}"
      #     context: [CPE-OIDC]
      #     filters: *filters
      #     # requires:
      #     #   - ec2_tear-down-test-env-initial
      # - set-up-test-env:
      #     name: ec2_set-up-test-env
      #     filters: *filters
      #     requires:
      #       - ec2_build-test-app
      #     aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_EC2}
      #     terraform-config-dir: "tests/terraform_setup/ec2"
      #     context: [CPE-OIDC]
      #     role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
      # - set-up-run_task-test:
      #     name: ec2_set-up-run_task-test
      #     filters: *filters
      #     requires:
      #       - ec2_set-up-test-env
      #     family_name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-sleep360"
      #     context: [CPE-OIDC]
      #     role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
      # - aws-ecs/run_task:
      #     name: ec2_run_task-test
      #     auth:
      #       - aws-cli/setup:
      #           role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
      #     filters: *filters
      #     requires:
      #       - ec2_set-up-run_task-test
      #     cluster: "${AWS_RESOURCE_NAME_PREFIX_EC2}-cluster"
      #     task_definition: "${AWS_RESOURCE_NAME_PREFIX_EC2}-sleep360"
      #     launch_type: "EC2"
      #     awsvpc: false
      #     run_task_output: "run_task_output.json"
      #     overrides: '{"containerOverrides":[{"name": "${INTERPOLATION_TEST}", "memory": 512}]}'
      #     context: [CPE-OIDC]
      # - tear-down-run_task-test:
      #     name: ec2_tear-down-run_task-test
      #     filters: *filters
      #     requires:
      #       - ec2_run_task-test
      #     family_name: ${AWS_RESOURCE_NAME_PREFIX_EC2}-sleep360
      #     context: [CPE-OIDC]
      #     role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
      # - test-service-update:
      #     name: ec2_test-update_service-command
      #     filters: *filters
      #     requires:
      #       - ec2_set-up-test-env
      #     aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_EC2}
      #     family_name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-family"
      #     service_name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-service"
      #     docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
      #     secret_arn: "arn:aws:ssm:${AWS_DEFAULT_REGION}:${AWS_ACCOUNT_ID}:parameter/TestParameterUpdate"
      #     docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}:${CIRCLE_SHA1}"
      #     context: [CPE-OIDC]
      #     role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
      # - test-task_definition-update:
      #     name: ec2_test-task_definition-update
      #     family_name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-family"
      #     context: [CPE-OIDC]
      #     role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
      #     filters: *filters
      #     requires:
      #       - ec2_test-update_service-command
      # - aws-ecs/deploy_service_update:
      #     name: ec2_test-update_service-job
      #     auth:
      #       - aws-cli/setup:
      #           role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
      #           profile_name: "ECS_TEST_PROFILE"
      #     profile_name: "ECS_TEST_PROFILE"
      #     context: [CPE-OIDC]
      #     filters: *filters
      #     requires:
      #       - ec2_test-task_definition-update
      #     family: "${AWS_RESOURCE_NAME_PREFIX_EC2}-family"
      #     service_name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-service"
      #     cluster: "${AWS_RESOURCE_NAME_PREFIX_EC2}-cluster"
      #     container_env_var_updates: 'container=${AWS_RESOURCE_NAME_PREFIX_EC2}-service,name=VERSION_INFO,value="Asterisk * expansion test ${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}",container=${AWS_RESOURCE_NAME_PREFIX_EC2}-service,name=BUILD_DATE,value=$(date)'
      #     verify_revision_is_deployed: true
      #     fail_on_verification_timeout: false
      #     post-steps:
      #       - test-deployment:
      #           service_name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-service"
      #           cluster: "${AWS_RESOURCE_NAME_PREFIX_EC2}-cluster"
      #           profile: "ECS_TEST_PROFILE"
      #           test-asterisk-expansion: true
      # - tear-down-test-env:
      #     name: ec2_tear-down-test-env
      #     filters: *filters
      #     requires:
      #       - ec2_test-update_service-job
      #       - ec2_tear-down-run_task-test
      #     aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_EC2}
      #     terraform-config-dir: "tests/terraform_setup/ec2"
      #     context: [CPE-OIDC]
      #     role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
      # ################
      # FargateSpot
      # ################
      - test-fargatespot:
          context: [CPE-OIDC]
          filters: *filters
          role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
          requires:
            - fargate_set-up-test-env
      #################
      # CodeDeploy
      #################
      - tear-down-test-env:
          name: codedeploy_fargate_tear-down-test-env-initial
          terraform-image: "hashicorp/terraform:1.4.0"
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate_codedeploy"
          context: [CPE-OIDC]
          role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
          filters: *filters
      - build-test-app:
          name: codedeploy_fargate_build-test-app
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}:${CIRCLE_SHA1}"
          context: [CPE-OIDC]
          requires:
          - codedeploy_fargate_tear-down-test-env-initial
          filters: *filters
      - set-up-test-env:
          name: codedeploy_fargate_set-up-test-env
          filters: *filters
          requires:
            - codedeploy_fargate_build-test-app
          terraform-image: "hashicorp/terraform:1.4.0"
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate_codedeploy"
          context: [CPE-OIDC]
          role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
      - test-service-update:
          name: codedeploy_fargate_test-update_service-command
          filters: *filters
          requires:
            - codedeploy_fargate_set-up-test-env
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}
          family_name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          service_name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}:${CIRCLE_SHA1}"
          role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
          skip-service-update: true
          context: [CPE-OIDC]
      - aws-ecs/deploy_service_update:
          name: codedeploy_fargate_test-update_service-job
          auth:
            - aws-cli/setup:
                role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
          filters: *filters
          requires:
            - codedeploy_fargate_test-update_service-command
          region: $AWS_REGION
          family: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          cluster: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-cluster"
          container_image_name_updates: "container=${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service,image-and-tag=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}:${CIRCLE_SHA1}"
          container_env_var_updates: 'container=${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service,name=VERSION_INFO,value="${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}",container=${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service,name=BUILD_DATE,value=$(date)'
          deployment_controller: "CODE_DEPLOY"
          codedeploy_application_name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeployapp"
          codedeploy_deployment_group_name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeploygroup"
          codedeploy_load_balanced_container_name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          codedeploy_load_balanced_container_port: "80"
          codedeploy_capacity_provider_name: "FARGATE"
          codedeploy_capacity_provider_base: "1"
          codedeploy_capacity_provider_weight: "2"
          verify_revision_is_deployed: false
          context: [CPE-OIDC]
          post-steps:
            - wait-for-codedeploy-deployment:
                application-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeployapp"
                deployment-group-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeploygroup"
            - test-deployment:
                service_name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
                cluster: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-cluster"
                delete-load-balancer: false
      - aws-ecs/deploy_service_update:
          name: codedeploy_fargate_test-update-and-wait-service-job
          auth:
            - aws-cli/setup:
                role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
          context: [CPE-OIDC]
          filters: *filters
          requires:
            - codedeploy_fargate_test-update_service-job
          region: $AWS_REGION
          family: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          cluster: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-cluster"
          container_image_name_updates: "container=${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service,image-and-tag=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}:${CIRCLE_SHA1}"
          container_env_var_updates: 'container=${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service,name=VERSION_INFO,value="${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}",container=${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service,name=BUILD_DATE,value=$(date)'
          deployment_controller: "CODE_DEPLOY"
          codedeploy_application_name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeployapp"
          codedeploy_deployment_group_name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeploygroup"
          codedeploy_load_balanced_container_name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          codedeploy_load_balanced_container_port: "80"
          verify_revision_is_deployed: true
          verification_timeout: "12m"
          post-steps:
            - test-deployment:
                service_name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
                cluster: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-cluster"
                delete-load-balancer: true
                port: "8080"
            - delete-service:
                service_name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
                cluster: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-cluster"
      - tear-down-test-env:
          name: codedeploy_fargate_tear-down-test-env
          requires:
            - codedeploy_fargate_test-update-and-wait-service-job
          terraform-image: "hashicorp/terraform:1.4.0"
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate_codedeploy"
          context: [CPE-OIDC]
          role_arn: "arn:aws:iam::122211685980:role/CPE_ECS_OIDC_TEST"
          filters: *filters
      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: circleci/aws-ecs
          vcs_type: << pipeline.project.type >>
          pub_type: production
          enable_pr_comment: true
          context: orb-publisher
          requires: [orb-tools/pack, fargate_tear-down-test-env, codedeploy_fargate_tear-down-test-env, integration-test-ecs-cli-install]
          filters: *release-filters
commands:
  wait-for-codedeploy-deployment:
    description: "Wait for the CodeDeploy deployment to be successful"
    parameters:
      application-name:
        description: "CodeDeploy application name"
        type: string
      deployment-group-name:
        description: "CodeDeploy application name"
        type: string
    steps:
      - run:
          name: Wait for CodeDeploy deployment to be successful (for orb testing and is not part of the orb)
          command: |
            DEPLOYMENT_ID=$(aws deploy list-deployments \
              --application-name << parameters.application-name >> \
              --deployment-group-name << parameters.deployment-group-name >> \
              --query "deployments" \
              --max-items 1 \
              --output text \
              | head -n 1)
            aws deploy wait deployment-successful --deployment-id ${DEPLOYMENT_ID}
  delete-service:
    description: "Forcefully delete an ECS service"
    parameters:
      service_name:
        description: "Name of the ECS service"
        type: string
      cluster:
        description: "Name of the cluster"
        type: string
    steps:
      - run:
          name: Delete ECS service
          command: |
            aws ecs delete-service \
              --cluster << parameters.cluster>> \
              --service << parameters.service_name >> \
              --force
  test-deployment:
    description: "Test the deployment"
    parameters:
      service_name:
        description: "Name of the ECS service"
        type: string
      cluster:
        description: "Name of the cluster"
        type: string
      test-asterisk-expansion:
        description: "Checks that asterisk expansion is prevented"
        type: boolean
        default: false
      delete-load-balancer:
        description: "Whether to delete the load balancer after the test"
        type: boolean
        default: false
      profile:
        description: "The profile used to authenticate when OIDC was used"
        type: string
        default: ""
      port:
        description: "Port to test against"
        type: string
        default: "80"
    steps:
      - run:
          name: Test deployment (for orb testing and is not part of the orb)
          command: |-
            if [ "<< parameters.profile >>" = "" ]; then
              PROFILE=""
            else
              PROFILE="--profile << parameters.profile >>"
            fi
            if [ "<< parameters.port >>" = "" ]; then
              PORT="80"
            else
              PORT="<< parameters.port >>"
            fi
            
            set -x
            TARGET_GROUP_ARN=$(aws ecs describe-services --cluster << parameters.cluster >> --services << parameters.service_name >> $PROFILE | jq -r '.services[0].loadBalancers[0].targetGroupArn')
            ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN $PROFILE | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
            ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN $PROFILE | jq -r '.LoadBalancers[0].DNSName')
            echo "ELB DNS NAME: $ELB_DNS_NAME"
            echo "Sleeping for one minute while waiting for AWS to come online."
            sleep 160s
            echo "Done sleeping"
            curl --retry 10 http://$ELB_DNS_NAME:$PORT
            run_with_retry() {
              MAX_RETRY=6
              n=0
              until [ $n -ge $MAX_RETRY ]
              do
                # retry many times in case it takes a while for the new task definition to take effect
                curl -s --retry 10 http://$ELB_DNS_NAME:$PORT \
                  | grep -E "Hello World\!.*${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}" <<#parameters.test-asterisk-expansion>> | grep "Asterisk \* expansion test"<</parameters.test-asterisk-expansion>> && break
                n=$[$n+1]
                sleep 60s
              done
              if [ $n -ge $MAX_RETRY ]; then
                echo "Error - Retry limit reached"
                exit 1
              fi
            }
            run_with_retry
            if [ "<< parameters.delete-load-balancer >>" == "1" ]; then
              aws elbv2 delete-load-balancer --load-balancer-arn $ELB_ARN $PROFILE
            fi
executors:
  mac:
    macos:
      xcode: 13.4.1
    shell: bash -eox pipefail
  linux:
    docker:
      - image: cimg/base:current
    shell: bash -eox pipefail
