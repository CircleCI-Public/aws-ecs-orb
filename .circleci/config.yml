version: 2.1

orb_promotion_filters: &orb_promotion_filters
  branches:
    ignore: /.*/
  tags:
    only: /^(major|minor|patch)-release-v\d+\.\d+\.\d+$/

executors:
  cli:
    resource_class: small
    docker:
      - image: circleci/circleci-cli
  node:
    resource_class: small
    docker:
      - image: circleci/node

orbs:
  aws-cli: circleci/aws-cli@0.1.4
  aws-ecs: circleci/aws-ecs@dev:alpha
  circleci-cli: circleci/circleci-cli@0.1.2
  queue: eddiewebb/queue@1.0.110
  orb-tools: circleci/orb-tools@8.27.3

parameters:
  run-integration-tests:
    type: boolean
    default: false

jobs:
  build-orb:
    docker:
      - image: circleci/python:3.7.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - cache-{{ checksum "tools/package-lock.json" }}
      - restore_cache:
          keys:
            - cache-{{ checksum "Pipfile.lock" }}
      - run:
          name: Install Python dependencies
          command: |
            pipenv sync --dev
      - run:
          name: Install JS dependencies
          command: |
            sudo apt-get update
            curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
            sudo apt-get install -y nodejs
            cd tools
            npm install
      - run:
          name: Run unit tests
          command: |
            cd src/python
            pipenv run pylint --py3k *.py
            pipenv run coverage run --source . -m pytest
            pipenv run coverage report --omit "*/test*"
      - run:
          name: Build orb
          command: |
            ./build_orb.sh
            cat src/orb.yml
      - circleci-cli/install
      - run:
          name: Validate orb
          command: |
            circleci orb validate src/orb.yml
      - save_cache:
          key: cache-{{ checksum "Pipfile.lock" }}
          paths:
            - ~/.local
            - ~/.cache
      - save_cache:
          key: cache-{{ checksum "tools/package-lock.json" }}
          paths:
            - ~/tools/node_modules

      - persist_to_workspace:
          root: src
          paths:
            - orb.yml

  trigger-integration-tests:
    docker:
      - image: circleci/python:3.7.1
    steps:
      - checkout
      - run:
          name: Trigger integration workflow
          command: |
            curl -u ${CIRCLE_TOKEN}: -X POST --header "Content-Type: application/json" -d "{
              \"branch\": \"${CIRCLE_BRANCH}\",
              \"parameters\": {
                \"run-integration-tests\": true
              }
            }" "https://circleci.com/api/v2/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/pipeline"

  build-test-app:
    docker:
      - image: circleci/golang:1.8
    parameters:
      docker-image-namespace:
        description: "The namespace in which the built Docker image will be published"
        type: string
      docker-image-name:
        description: "The name for the built Docker image"
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Make the executable
          command: |
            cd tests/test_app
            go build -o demo-app src/main.go
      - run:
          name: Build image
          command: |
            cd tests/test_app
            docker build -t <<parameters.docker-image-namespace>>/<<parameters.docker-image-name>> .
      - run:
          name: Test image
          command: |
            docker run -d -p 8080:8080 --name built-image <<parameters.docker-image-namespace>>/<<parameters.docker-image-name>>
            sleep 10
            docker run --network container:built-image appropriate/curl --retry 10 --retry-connrefused http://localhost:8080 | grep "Hello World!"
      - run:
          name: Save image to an archive
          command: |
            mkdir -p docker-images/<<parameters.docker-image-name>>

            docker save -o docker-images/<<parameters.docker-image-name>>/<<parameters.docker-image-name>>.tar <<parameters.docker-image-namespace>>/<<parameters.docker-image-name>>
      - persist_to_workspace:
          root: .
          paths:
            - docker-images

  set-up-test-env:
    parameters:
      terraform-image:
        type: string
        # Pin to terraform 0.12
        default: hashicorp/terraform@sha256:cf9b54657c498378e3fe43f5e36039c9b7d8e620a606fbdc713d63df514fb96d
      aws-resource-name-prefix:
        type: string
      terraform-config-dir:
        type: string
    docker:
      - image: << parameters.terraform-image >>
    steps:
      - run:
          name: Check if test env should be set up
          command: |
            if [ "${SKIP_TEST_ENV_CREATION}" = "true" ]
            then
              circleci step halt
            fi
      - checkout
      - run:
          name: terraform init
          command: |
            cd << parameters.terraform-config-dir >>
            terraform init -input=false
      - run:
          name: terraform plan
          command: |
            cd << parameters.terraform-config-dir >>
            terraform plan \
                -input=false \
                -var "aws_access_key=${AWS_ACCESS_KEY_ID}" \
                -var "aws_secret_key=${AWS_SECRET_ACCESS_KEY}" \
                -var "aws_region=${AWS_DEFAULT_REGION}" \
                -var "aws_account_id=${AWS_ACCOUNT_ID}" \
                -var "aws_resource_prefix=<< parameters.aws-resource-name-prefix >>" \
                -out tfplan
      - run:
          name: terraform apply
          command: |
            cd << parameters.terraform-config-dir >>
            terraform apply -input=false -auto-approve tfplan

  test-service-update:
    docker:
      - image: circleci/python:3.7.1
    parameters:
      aws-resource-name-prefix:
        description: "Prefix that the AWS resources for this launch type share"
        type: string
      family-name:
        description: "Family name"
        type: string
      service-name:
        description: "Service name"
        type: string
      docker-image-namespace:
        description: "The namespace in which the Docker image was published"
        type: string
      docker-image-name:
        description: "The name for the previously built Docker image"
        type: string
      skip-service-update:
        description: "Skip updating the ECS service"
        type: boolean
        default: false
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: "$AWS_ACCESS_KEY_ID"
          aws-region: "$AWS_DEFAULT_REGION"
      - run:
          name: Load image
          command: |
            docker load --input workspace/docker-images/<<parameters.docker-image-name>>/<<parameters.docker-image-name>>.tar
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="<< parameters.aws-resource-name-prefix >>"' >> $BASH_ENV
            echo 'export ECS_CLUSTER_NAME="<< parameters.aws-resource-name-prefix >>-cluster"' >> $BASH_ENV
            echo 'export ECS_SERVICE_NAME="<< parameters.aws-resource-name-prefix >>-service"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Push image
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $FULL_IMAGE_NAME
      - unless:
          condition: << parameters.skip-service-update >>
          steps:
            - aws-ecs/update-service:
                family: "<< parameters.family-name >>"
                service-name: "<< parameters.service-name >>"
                cluster-name: "<< parameters.aws-resource-name-prefix >>-cluster"
                container-image-name-updates: "container=<< parameters.aws-resource-name-prefix >>-service,image-and-tag=$FULL_IMAGE_NAME"
                container-env-var-updates: "container=<< parameters.aws-resource-name-prefix >>-service,name=VERSION_INFO,value=\"${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}\",container=<< parameters.aws-resource-name-prefix >>-service,name=BUILD_DATE,value=$(date)"
                verify-revision-is-deployed: true
                fail-on-verification-timeout: false
            - test-deployment:
                service-name: "<< parameters.aws-resource-name-prefix >>-service"
                cluster-name: "<< parameters.aws-resource-name-prefix >>-cluster"

  tear-down-test-env:
    parameters:
      terraform-image:
        type: string
        # Pin to terraform 0.12
        default: hashicorp/terraform@sha256:cf9b54657c498378e3fe43f5e36039c9b7d8e620a606fbdc713d63df514fb96d
      aws-resource-name-prefix:
        type: string
      terraform-config-dir:
        type: string
    docker:
      - image: << parameters.terraform-image >>
    steps:
      - run:
          name: Check if test env should be destroyed
          command: |
            if [ "${SKIP_TEST_ENV_TEARDOWN}" = "true" ]
            then
              circleci step halt
            fi
      - checkout
      - run:
          name: terraform init
          command: |
            cd << parameters.terraform-config-dir >>
            terraform init -input=false
      - run:
          name: Tear down test environment
          command: |
            cd << parameters.terraform-config-dir >>
            terraform destroy \
                -input=false \
                -auto-approve \
                -var "aws_access_key=${AWS_ACCESS_KEY_ID}" \
                -var "aws_secret_key=${AWS_SECRET_ACCESS_KEY}" \
                -var "aws_region=${AWS_DEFAULT_REGION}" \
                -var "aws_account_id=${AWS_ACCOUNT_ID}" \
                -var "aws_resource_prefix=<< parameters.aws-resource-name-prefix >>"
  # Orb promotion workflow jobs
  pre-orb-promotion-check:
    docker:
      - image: circleci/python:3.7.1
    steps:
      - checkout
      - run:
          name: Check that this is a master branch commit
          command: |
            git clone "$CIRCLE_REPOSITORY_URL" repository
            cd repository
            git branch --contains ${CIRCLE_SHA1} | grep "master"
  promote-orb-into-production:
    parameters:
      orb-name:
        type: string
        description: |
          Semver-less name of the orb to be promoted into production
      orb-ref:
        type: string
        description: |
          Version information of the orb to be promoted into production
    executor: circleci-cli/default
    steps:
      - checkout
      - run:
          name: Promote dev orb to production
          command: |
            RELEASE_TYPE=''
            if [[ "${CIRCLE_TAG}" =~ major-release-* ]]; then
              RELEASE_TYPE='major'
            elif [[ "${CIRCLE_TAG}" =~ minor-release-* ]]; then
              RELEASE_TYPE='minor'
            elif [[ "${CIRCLE_TAG}" =~ patch-release-* ]]; then
              RELEASE_TYPE='patch'
            fi
            if [ -n "${RELEASE_TYPE}" ]; then
              circleci orb publish promote \
              <<parameters.orb-name>>@<<parameters.orb-ref>> \
              ${RELEASE_TYPE} --token \
              ${CIRCLE_TOKEN}
            fi
commands:
  wait-for-codedeploy-deployment:
    description: "Wait for the CodeDeploy deployment to be successful"
    parameters:
      application-name:
          description: "CodeDeploy application name"
          type: string
      deployment-group-name:
          description: "CodeDeploy application name"
          type: string
    steps:
      - run:
          name: Wait for CodeDeploy deployment to be successful (for orb testing and is not part of the orb)
          command: |
            DEPLOYMENT_ID=$(aws deploy list-deployments \
              --application-name << parameters.application-name >> \
              --deployment-group-name << parameters.deployment-group-name >> \
              --query "deployments" \
              --max-items 1 \
              --output text \
              | head -n 1)
            aws deploy wait deployment-successful --deployment-id ${DEPLOYMENT_ID}
  delete-service:
    description: "Forcefully delete an ECS service"
    parameters:
      service-name:
          description: "Name of the ECS service"
          type: string
      cluster-name:
          description: "Name of the cluster"
          type: string
    steps:
      - run:
          name: Delete ECS service
          command: |
            aws ecs delete-service \
              --cluster << parameters.cluster-name >> \
              --service << parameters.service-name >> \
              --force
  test-deployment:
    description: "Test the deployment"
    parameters:
      service-name:
          description: "Name of the ECS service"
          type: string
      cluster-name:
          description: "Name of the cluster"
          type: string
      delete-load-balancer:
          description: "Whether to delete the load balancer after the test"
          type: boolean
          default: false
    steps:
      - run:
          name: Test deployment (for orb testing and is not part of the orb)
          command: |
            set -x
            TARGET_GROUP_ARN=$(aws ecs describe-services --cluster << parameters.cluster-name >> --services << parameters.service-name >> | jq -r '.services[0].loadBalancers[0].targetGroupArn')
            ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
            ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
            for attempt in {1..25}; do
              curl -s --retry 10 http://$ELB_DNS_NAME | grep -E "Hello World!.*${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}"
            done
            if [ "<< parameters.delete-load-balancer >>" == "true" ]; then
              aws elbv2 delete-load-balancer --load-balancer-arn $ELB_ARN
            fi

workflows:
  build_deploy-dev:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      - build-orb

      - queue/block_workflow:
          consider-branch: false
          requires:
            - build-orb

      - orb-tools/publish-dev:
          orb-name: circleci/aws-ecs
          requires:
            - queue/block_workflow
          context: orb-publishing

      - trigger-integration-tests:
          requires:
            - orb-tools/publish-dev
          context: orb-publishing

  integration_tests:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      - build-test-app:
          name: ec2_build-test-app
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}:${CIRCLE_SHA1}"

      - build-test-app:
          name: fargate_build-test-app
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}:${CIRCLE_SHA1}"

      - build-test-app:
          name: codedeploy_fargate_build-test-app
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}:${CIRCLE_SHA1}"

      - set-up-test-env:
          name: ec2_set-up-test-env
          requires:
            - ec2_build-test-app
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_EC2}
          terraform-config-dir: "tests/terraform_setup/ec2"

      - set-up-test-env:
          name: fargate_set-up-test-env
          requires:
            - fargate_build-test-app
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate"

      - set-up-test-env:
          name: codedeploy_fargate_set-up-test-env
          requires:
            - codedeploy_fargate_build-test-app
          terraform-image: "hashicorp/terraform:latest"
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate_codedeploy"

      - test-service-update:
          name: ec2_test-update-service-command
          requires:
            - ec2_set-up-test-env
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_EC2}
          family-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-family"
          service-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-service"
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}:${CIRCLE_SHA1}"

      - test-service-update:
          name: fargate_test-update-service-command
          requires:
            - fargate_set-up-test-env
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_FARGATE}
          family-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
          service-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}:${CIRCLE_SHA1}"

      - test-service-update:
          name: codedeploy_fargate_test-update-service-command
          requires:
            - codedeploy_fargate_set-up-test-env
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}
          family-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          service-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}:${CIRCLE_SHA1}"
          skip-service-update: true

      - aws-ecs/deploy-service-update:
          name: ec2_test-update-service-job
          docker-image-for-job: circleci/python:2.7.15
          requires:
            - ec2_test-update-service-command
          aws-access-key-id: "${AWS_ACCESS_KEY_ID}"
          aws-region: "${AWS_DEFAULT_REGION}"
          family: "${AWS_RESOURCE_NAME_PREFIX_EC2}-family"
          service-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-cluster"
          container-env-var-updates: "container=${AWS_RESOURCE_NAME_PREFIX_EC2}-service,name=VERSION_INFO,value=\"${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}\",container=${AWS_RESOURCE_NAME_PREFIX_EC2}-service,name=BUILD_DATE,value=$(date)"
          verify-revision-is-deployed: true
          fail-on-verification-timeout: false
          post-steps:
            - test-deployment:
                service-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-service"
                cluster-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-cluster"

      - aws-ecs/deploy-service-update:
          name: fargate_test-update-service-job
          docker-image-for-job: circleci/python:3.4.9
          requires:
            - fargate_test-update-service-command
          aws-access-key-id: "${AWS_ACCESS_KEY_ID}"
          aws-region: "${AWS_DEFAULT_REGION}"
          family: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-cluster"
          container-env-var-updates: "container=${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service,name=VERSION_INFO,value=\"${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}\",container=${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service,name=BUILD_DATE,value=$(date)"
          verify-revision-is-deployed: true
          max-poll-attempts: 40
          poll-interval: 10
          post-steps:
            - test-deployment:
                service-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
                cluster-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-cluster"

      - aws-ecs/deploy-service-update:
          name: codedeploy_fargate_test-update-service-job
          docker-image-for-job: circleci/python:3.4.9
          requires:
            - codedeploy_fargate_test-update-service-command
          aws-access-key-id: "${AWS_ACCESS_KEY_ID}"
          aws-region: "${AWS_DEFAULT_REGION}"
          family: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-cluster"
          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service,image-and-tag=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}:${CIRCLE_SHA1}"
          container-env-var-updates: "container=${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service,name=VERSION_INFO,value=\"${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}\",container=${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service,name=BUILD_DATE,value=$(date)"
          deployment-controller: "CODE_DEPLOY"
          codedeploy-application-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeployapp"
          codedeploy-deployment-group-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeploygroup"
          codedeploy-load-balanced-container-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          codedeploy-load-balanced-container-port: 8080
          # verify-revision-is-deployed is not supported for blue/green deployment type services
          verify-revision-is-deployed: false
          post-steps:
            - wait-for-codedeploy-deployment:
                application-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeployapp"
                deployment-group-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeploygroup"
            - test-deployment:
                service-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
                cluster-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-cluster"
                delete-load-balancer: true
            - delete-service:
                service-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
                cluster-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-cluster"

      - tear-down-test-env:
          name: ec2_tear-down-test-env
          requires:
            - ec2_test-update-service-job
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_EC2}
          terraform-config-dir: "tests/terraform_setup/ec2"

      - tear-down-test-env:
          name: fargate_tear-down-test-env
          requires:
            - fargate_test-update-service-job
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate"

      - tear-down-test-env:
          name: codedeploy_fargate_tear-down-test-env
          requires:
            - codedeploy_fargate_test-update-service-job
          terraform-image: "hashicorp/terraform:latest"
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate_codedeploy"

  # Tag-triggered workflow to promote a dev orb into production.
  # The tag is expected to have been applied manually.
  production-orb-publishing:
    jobs:
      - pre-orb-promotion-check:
          filters: *orb_promotion_filters
      - hold-for-approval:
          type: approval
          requires:
            - pre-orb-promotion-check
          filters: *orb_promotion_filters
      - promote-orb-into-production:
          orb-name: circleci/aws-ecs
          orb-ref: dev:${CIRCLE_SHA1:0:7}
          context: orb-publishing
          requires:
            - hold-for-approval
          filters: *orb_promotion_filters
