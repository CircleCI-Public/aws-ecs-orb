version: 2.1

executors:
  cli:
    resource_class: small
    docker:
      - image: circleci/circleci-cli
  node:
    resource_class: small
    docker:
      - image: circleci/node

orbs:
  aws-cli: circleci/aws-cli@0.1.4
  aws-ecs: circleci/aws-ecs@dev:alpha
  circleci-cli: circleci/circleci-cli@0.1.2
  circle-compare-url: iynere/compare-url@0.3.1
  queue: eddiewebb/queue@1.0.110

jobs:
  build-orb:
    docker:
      - image: circleci/python:3.7.1
    steps:
      - checkout
      - restore_cache:
          keys:
            - cache-{{ checksum "tools/package-lock.json" }}
      - restore_cache:
          keys:
            - cache-{{ checksum "Pipfile.lock" }}
      - run:
          name: Install Python dependencies
          command: |
            pipenv sync --dev
      - run:
          name: Install JS dependencies
          command: |
            sudo apt-get update
            curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
            sudo apt-get install -y nodejs
            cd tools
            npm install
      - run:
          name: Run unit tests
          command: |
            cd src/python
            pipenv run pylint --py3k *.py
            pipenv run coverage run --source . -m pytest
            pipenv run coverage report --omit "*/test*"
      - run:
          name: Build orb
          command: |
            ./build_orb.sh
            cat src/orb.yml
      - circleci-cli/install
      - run:
          name: Validate orb
          command: |
            circleci orb validate src/orb.yml
      - save_cache:
          key: cache-{{ checksum "Pipfile.lock" }}
          paths:
            - ~/.local
            - ~/.cache
      - save_cache:
          key: cache-{{ checksum "tools/package-lock.json" }}
          paths:
            - ~/tools/node_modules

      - persist_to_workspace:
          root: src
          paths:
            - orb.yml

  build-test-app:
    docker:
      - image: circleci/golang:1.8
    parameters:
      docker-image-namespace:
        description: "The namespace in which the built Docker image will be published"
        type: string
      docker-image-name:
        description: "The name for the built Docker image"
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Make the executable
          command: |
            cd tests/test_app
            go build -o demo-app src/main.go
      - run:
          name: Build image
          command: |
            cd tests/test_app
            docker build -t <<parameters.docker-image-namespace>>/<<parameters.docker-image-name>> .
      - run:
          name: Test image
          command: |
            docker run -d -p 8080:8080 --name built-image <<parameters.docker-image-namespace>>/<<parameters.docker-image-name>>
            sleep 10
            docker run --network container:built-image appropriate/curl --retry 10 --retry-connrefused http://localhost:8080 | grep "Hello World!"
      - run:
          name: Save image to an archive
          command: |
            mkdir -p docker-images/<<parameters.docker-image-name>>

            docker save -o docker-images/<<parameters.docker-image-name>>/<<parameters.docker-image-name>>.tar <<parameters.docker-image-namespace>>/<<parameters.docker-image-name>>
      - persist_to_workspace:
          root: .
          paths:
            - docker-images

  set-up-test-env:
    parameters:
      terraform-image:
        type: string
        # Pin to terraform 0.12
        default: hashicorp/terraform@sha256:cf9b54657c498378e3fe43f5e36039c9b7d8e620a606fbdc713d63df514fb96d
      aws-resource-name-prefix:
        type: string
      terraform-config-dir:
        type: string
    docker:
      - image: << parameters.terraform-image >>
    steps:
      - run:
          name: Check if test env should be set up
          command: |
            if [ "${SKIP_TEST_ENV_CREATION}" = "true" ]
            then
              circleci step halt
            fi
      - checkout
      - run:
          name: terraform init
          command: |
            cd << parameters.terraform-config-dir >>
            terraform init -input=false
      - run:
          name: terraform plan
          command: |
            cd << parameters.terraform-config-dir >>
            terraform plan \
                -input=false \
                -var "aws_access_key=${AWS_ACCESS_KEY_ID}" \
                -var "aws_secret_key=${AWS_SECRET_ACCESS_KEY}" \
                -var "aws_region=${AWS_DEFAULT_REGION}" \
                -var "aws_account_id=${AWS_ACCOUNT_ID}" \
                -var "aws_resource_prefix=<< parameters.aws-resource-name-prefix >>" \
                -out tfplan
      - run:
          name: terraform apply
          command: |
            cd << parameters.terraform-config-dir >>
            terraform apply -input=false -auto-approve tfplan

  test-service-update:
    docker:
      - image: circleci/python:3.7.1
    parameters:
      aws-resource-name-prefix:
        description: "Prefix that the AWS resources for this launch type share"
        type: string
      family-name:
        description: "Family name"
        type: string
      service-name:
        description: "Service name"
        type: string
      docker-image-namespace:
        description: "The namespace in which the Docker image was published"
        type: string
      docker-image-name:
        description: "The name for the previously built Docker image"
        type: string
      skip-service-update:
        description: "Skip updating the ECS service"
        type: boolean
        default: false
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - aws-cli/install
      - aws-cli/configure:
          aws-access-key-id: "$AWS_ACCESS_KEY_ID"
          aws-region: "$AWS_DEFAULT_REGION"
      - run:
          name: Load image
          command: |
            docker load --input workspace/docker-images/<<parameters.docker-image-name>>/<<parameters.docker-image-name>>.tar
      - run:
          name: Setup common environment variables
          command: |
            echo 'export ECR_REPOSITORY_NAME="<< parameters.aws-resource-name-prefix >>"' >> $BASH_ENV
            echo 'export ECS_CLUSTER_NAME="<< parameters.aws-resource-name-prefix >>-cluster"' >> $BASH_ENV
            echo 'export ECS_SERVICE_NAME="<< parameters.aws-resource-name-prefix >>-service"' >> $BASH_ENV
            echo 'export FULL_IMAGE_NAME="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${ECR_REPOSITORY_NAME}:${CIRCLE_SHA1}"' >> $BASH_ENV
      - run:
          name: Push image
          command: |
            eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
            docker push $FULL_IMAGE_NAME
      - unless:
          condition: << parameters.skip-service-update >>
          steps:
            - aws-ecs/update-service:
                family: "<< parameters.family-name >>"
                service-name: "<< parameters.service-name >>"
                cluster-name: "<< parameters.aws-resource-name-prefix >>-cluster"
                container-image-name-updates: "container=<< parameters.aws-resource-name-prefix >>-service,image-and-tag=$FULL_IMAGE_NAME"
                container-env-var-updates: "container=<< parameters.aws-resource-name-prefix >>-service,name=VERSION_INFO,value=\"${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}\",container=<< parameters.aws-resource-name-prefix >>-service,name=BUILD_DATE,value=$(date)"
                verify-revision-is-deployed: true
                fail-on-verification-timeout: false
            - test-deployment:
                service-name: "<< parameters.aws-resource-name-prefix >>-service"
                cluster-name: "<< parameters.aws-resource-name-prefix >>-cluster"

  tear-down-test-env:
    parameters:
      terraform-image:
        type: string
        # Pin to terraform 0.12
        default: hashicorp/terraform@sha256:cf9b54657c498378e3fe43f5e36039c9b7d8e620a606fbdc713d63df514fb96d
      aws-resource-name-prefix:
        type: string
      terraform-config-dir:
        type: string
    docker:
      - image: << parameters.terraform-image >>
    steps:
      - run:
          name: Check if test env should be destroyed
          command: |
            if [ "${SKIP_TEST_ENV_TEARDOWN}" = "true" ]
            then
              circleci step halt
            fi
      - checkout
      - run:
          name: terraform init
          command: |
            cd << parameters.terraform-config-dir >>
            terraform init -input=false
      - run:
          name: Tear down test environment
          command: |
            cd << parameters.terraform-config-dir >>
            terraform destroy \
                -input=false \
                -auto-approve \
                -var "aws_access_key=${AWS_ACCESS_KEY_ID}" \
                -var "aws_secret_key=${AWS_SECRET_ACCESS_KEY}" \
                -var "aws_region=${AWS_DEFAULT_REGION}" \
                -var "aws_account_id=${AWS_ACCOUNT_ID}" \
                -var "aws_resource_prefix=<< parameters.aws-resource-name-prefix >>"

  publish-orb:
    description: Publish the orb
    parameters:
      filepath:
        type: string
        default: orb.yml
      to-prod:
        type: boolean
        default: false
      release-type:
        type: enum
        description: If publishing to production, what type of release?
        enum: ["patch", "minor", "major"]
        default: "patch"
      circle-token:
        type: env_var_name
        default: CIRCLE_TOKEN
    executor: cli
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - unless:
          condition: <<parameters.to-prod>>
          steps:
            - run:
                name: publish dev versions
                command: |
                  # for integration testing
                  circleci orb publish <<parameters.filepath>> circleci/aws-ecs@dev:alpha --token $CIRCLE_TOKEN

                  # for transparency
                  circleci orb publish <<parameters.filepath>> circleci/aws-ecs@dev:$CIRCLE_BRANCH-${CIRCLE_SHA1:0:7} --token $CIRCLE_TOKEN

                  # for potentially promoting to prod
                  circleci orb publish <<parameters.filepath>> circleci/aws-ecs@dev:${CIRCLE_SHA1:0:7} --token $CIRCLE_TOKEN

      - when:
          condition: <<parameters.to-prod>>
          steps:
            - run:
                name: use compare URL commit range (stored in git tag) to determine if prod publishing is necessary
                command: |
                  # use compare URL commit range (stored in git tag) to determine if prod publishing is necessary

                  if [[ $(echo "$CIRCLE_TAG" | grep "integration-") ]]; then
                    COMMIT_RANGE=$(echo "$CIRCLE_TAG" | sed 's:integration-::' | sed 's:\._\.:...:')
                  elif [[ $(echo "$CIRCLE_TAG" | grep "master-") ]]; then
                    COMMIT_RANGE=$(echo "$CIRCLE_TAG" | sed 's:master-::' | sed 's:\._\.:...:')
                  fi

                  if [[ $(git diff $COMMIT_RANGE --name-status | grep -e "src" -e "tools" -e "tests" -e build_orb) ]]; then
                    circleci orb publish promote circleci/aws-ecs@dev:${CIRCLE_SHA1:0:7} <<parameters.release-type>> --token $CIRCLE_TOKEN
                  fi

  trigger-integration:
    executor: node
    parameters:
      tag:
        type: enum
        default: "integration"
        enum: ["integration", master]
    steps:
      - checkout

      - attach_workspace:
          at: workspace

      - add_ssh_keys:
          fingerprints:
            - "fc:22:bf:38:f5:27:ea:6a:98:a3:d1:ce:ae:17:56:8a"

      - run:
          name: git config
          command: |
            git config --global user.email "$CIRCLE_USERNAME@users.noreply.github.com"
            git config --global user.name "$CIRCLE_USERNAME"

      - run: |
          # save value stored in file to a local env var
          CIRCLE_COMPARE_URL=$(cat workspace/CIRCLE_COMPARE_URL.txt)

          # borrowed from https://discuss.circleci.com/t/does-circleci-2-0-work-with-monorepos

          COMMIT_RANGE=$(echo $CIRCLE_COMPARE_URL | sed 's:^.*/compare/::g')
          echo "Commit range: $COMMIT_RANGE"

          INTEGRATION_TAG=<<parameters.tag>>-$(echo $COMMIT_RANGE | sed 's:\.\.\.:._.:')
          git tag $INTEGRATION_TAG
          git push origin $INTEGRATION_TAG

commands:
  wait-for-codedeploy-deployment:
    description: "Wait for the CodeDeploy deployment to be successful"
    parameters:
      application-name:
          description: "CodeDeploy application name"
          type: string
      deployment-group-name:
          description: "CodeDeploy application name"
          type: string
    steps:
      - run:
          name: Wait for CodeDeploy deployment to be successful (for orb testing and is not part of the orb)
          command: |
            DEPLOYMENT_ID=$(aws deploy list-deployments \
              --application-name << parameters.application-name >> \
              --deployment-group-name << parameters.deployment-group-name >> \
              --query "deployments" \
              --max-items 1 \
              --output text \
              | head -n 1)
            aws deploy wait deployment-successful --deployment-id ${DEPLOYMENT_ID}
  delete-service:
    description: "Forcefully delete an ECS service"
    parameters:
      service-name:
          description: "Name of the ECS service"
          type: string
      cluster-name:
          description: "Name of the cluster"
          type: string
    steps:
      - run:
          name: Delete ECS service
          command: |
            aws ecs delete-service \
              --cluster << parameters.cluster-name >> \
              --service << parameters.service-name >> \
              --force
  test-deployment:
    description: "Test the deployment"
    parameters:
      service-name:
          description: "Name of the ECS service"
          type: string
      cluster-name:
          description: "Name of the cluster"
          type: string
      delete-load-balancer:
          description: "Whether to delete the load balancer after the test"
          type: boolean
          default: false
    steps:
      - run:
          name: Test deployment (for orb testing and is not part of the orb)
          command: |
            set -x
            TARGET_GROUP_ARN=$(aws ecs describe-services --cluster << parameters.cluster-name >> --services << parameters.service-name >> | jq -r '.services[0].loadBalancers[0].targetGroupArn')
            ELB_ARN=$(aws elbv2 describe-target-groups --target-group-arns $TARGET_GROUP_ARN | jq -r '.TargetGroups[0].LoadBalancerArns[0]')
            ELB_DNS_NAME=$(aws elbv2 describe-load-balancers --load-balancer-arns $ELB_ARN | jq -r '.LoadBalancers[0].DNSName')
            for attempt in {1..25}; do
              curl -s --retry 10 http://$ELB_DNS_NAME | grep -E "Hello World!.*${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}"
            done
            if [ "<< parameters.delete-load-balancer >>" == "true" ]; then
              aws elbv2 delete-load-balancer --load-balancer-arn $ELB_ARN
            fi

workflows:
  build_deploy-dev:
    jobs:
      - build-orb

      - publish-orb:
          name: publish-dev-orb
          filepath: workspace/orb.yml
          context: orb-publishing
          requires:
            - build-orb

      - circle-compare-url/reconstruct:
          name: reconstruct_compare_url
          resource-class: small
          requires:
            - publish-dev-orb

      - queue/block_workflow:
          consider-branch: false
          requires:
            - reconstruct_compare_url

      - trigger-integration:
          name: trigger-integration-dev
          requires:
            - queue/block_workflow
          filters:
            branches:
              ignore: master

      - trigger-integration:
          name: trigger-integration-master
          tag: master
          requires:
            - queue/block_workflow
          filters:
            branches:
              only: master

  integration_test-prod_deploy:
    jobs:
      - build-test-app:
          name: ec2_build-test-app-dev
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}:${CIRCLE_SHA1}"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /integration-.*/

      - build-test-app:
          name: fargate_build-test-app-dev
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}:${CIRCLE_SHA1}"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /integration-.*/

      - build-test-app:
          name: codedeploy_fargate_build-test-app-dev
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}:${CIRCLE_SHA1}"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /integration-.*/

      - set-up-test-env:
          name: ec2_set-up-test-env-dev
          requires:
            - ec2_build-test-app-dev
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_EC2}
          terraform-config-dir: "tests/terraform_setup/ec2"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /integration-.*/

      - set-up-test-env:
          name: fargate_set-up-test-env-dev
          requires:
            - fargate_build-test-app-dev
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /integration-.*/

      - set-up-test-env:
          name: codedeploy_fargate_set-up-test-env-dev
          requires:
            - codedeploy_fargate_build-test-app-dev
          terraform-image: "hashicorp/terraform:latest"
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate_codedeploy"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /integration-.*/

      - test-service-update:
          name: ec2_test-update-service-command-dev
          requires:
            - ec2_set-up-test-env-dev
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_EC2}
          family-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-family"
          service-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-service"
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}:${CIRCLE_SHA1}"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /integration-.*/

      - test-service-update:
          name: fargate_test-update-service-command-dev
          requires:
            - fargate_set-up-test-env-dev
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_FARGATE}
          family-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
          service-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}:${CIRCLE_SHA1}"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /integration-.*/

      - test-service-update:
          name: codedeploy_fargate_test-update-service-command-dev
          requires:
            - codedeploy_fargate_set-up-test-env-dev
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}
          family-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          service-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}:${CIRCLE_SHA1}"
          skip-service-update: true
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /integration-.*/

      - aws-ecs/deploy-service-update:
          name: ec2_test-update-service-job-dev
          docker-image-for-job: circleci/python:2.7.15
          requires:
            - ec2_test-update-service-command-dev
          aws-access-key-id: "${AWS_ACCESS_KEY_ID}"
          aws-region: "${AWS_DEFAULT_REGION}"
          family: "${AWS_RESOURCE_NAME_PREFIX_EC2}-family"
          service-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-cluster"
          container-env-var-updates: "container=${AWS_RESOURCE_NAME_PREFIX_EC2}-service,name=VERSION_INFO,value=\"${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}\",container=${AWS_RESOURCE_NAME_PREFIX_EC2}-service,name=BUILD_DATE,value=$(date)"
          verify-revision-is-deployed: true
          fail-on-verification-timeout: false
          post-steps:
            - test-deployment:
                service-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-service"
                cluster-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-cluster"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /integration-.*/

      - aws-ecs/deploy-service-update:
          name: fargate_test-update-service-job-dev
          docker-image-for-job: circleci/python:3.4.9
          requires:
            - fargate_test-update-service-command-dev
          aws-access-key-id: "${AWS_ACCESS_KEY_ID}"
          aws-region: "${AWS_DEFAULT_REGION}"
          family: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-cluster"
          container-env-var-updates: "container=${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service,name=VERSION_INFO,value=\"${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}\",container=${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service,name=BUILD_DATE,value=$(date)"
          verify-revision-is-deployed: true
          max-poll-attempts: 40
          poll-interval: 10
          post-steps:
            - test-deployment:
                service-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
                cluster-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-cluster"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /integration-.*/

      - aws-ecs/deploy-service-update:
          name: codedeploy_fargate_test-update-service-job-dev
          docker-image-for-job: circleci/python:3.4.9
          requires:
            - codedeploy_fargate_test-update-service-command-dev
          aws-access-key-id: "${AWS_ACCESS_KEY_ID}"
          aws-region: "${AWS_DEFAULT_REGION}"
          family: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-cluster"
          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service,image-and-tag=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}:${CIRCLE_SHA1}"
          container-env-var-updates: "container=${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service,name=VERSION_INFO,value=\"${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}\",container=${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service,name=BUILD_DATE,value=$(date)"
          deployment-controller: "CODE_DEPLOY"
          codedeploy-application-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeployapp"
          codedeploy-deployment-group-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeploygroup"
          codedeploy-load-balanced-container-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          codedeploy-load-balanced-container-port: 8080
          # verify-revision-is-deployed is not supported for blue/green deployment type services
          verify-revision-is-deployed: false
          post-steps:
            - wait-for-codedeploy-deployment:
                application-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeployapp"
                deployment-group-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeploygroup"
            - test-deployment:
                service-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
                cluster-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-cluster"
                delete-load-balancer: true
            - delete-service:
                service-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
                cluster-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-cluster"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /integration-.*/

      - tear-down-test-env:
          name: ec2_tear-down-test-env-dev
          requires:
            - ec2_test-update-service-job-dev
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_EC2}
          terraform-config-dir: "tests/terraform_setup/ec2"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /integration-.*/

      - tear-down-test-env:
          name: fargate_tear-down-test-env-dev
          requires:
            - fargate_test-update-service-job-dev
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /integration-.*/

      - tear-down-test-env:
          name: codedeploy_fargate_tear-down-test-env-dev
          requires:
            - codedeploy_fargate_test-update-service-job-dev
          terraform-image: "hashicorp/terraform:latest"
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate_codedeploy"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /integration-.*/

      - build-test-app:
          name: ec2_build-test-app-master
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}:${CIRCLE_SHA1}"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/

      - build-test-app:
          name: fargate_build-test-app-master
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}:${CIRCLE_SHA1}"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/

      - build-test-app:
          name: codedeploy_fargate_build-test-app-master
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}:${CIRCLE_SHA1}"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/

      - set-up-test-env:
          name: ec2_set-up-test-env-master
          requires:
            - ec2_build-test-app-master
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_EC2}
          terraform-config-dir: "tests/terraform_setup/ec2"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/

      - set-up-test-env:
          name: fargate_set-up-test-env-master
          requires:
            - fargate_build-test-app-master
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/

      - set-up-test-env:
          name: codedeploy_fargate_set-up-test-env-master
          requires:
            - codedeploy_fargate_build-test-app-master
          terraform-image: "hashicorp/terraform:latest"
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate_codedeploy"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/

      - test-service-update:
          name: ec2_test-update-service-command-master
          requires:
            - ec2_set-up-test-env-master
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_EC2}
          family-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-family"
          service-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-service"
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}:${CIRCLE_SHA1}"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/

      - test-service-update:
          name: fargate_test-update-service-command-master
          requires:
            - fargate_set-up-test-env-master
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_FARGATE}
          family-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
          service-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}:${CIRCLE_SHA1}"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/

      - test-service-update:
          name: codedeploy_fargate_test-update-service-command-master
          requires:
            - codedeploy_fargate_set-up-test-env-master
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}
          family-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          service-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          docker-image-namespace: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
          docker-image-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}:${CIRCLE_SHA1}"
          skip-service-update: true
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/

      - aws-ecs/deploy-service-update:
          name: ec2_test-update-service-job-master
          docker-image-for-job: circleci/python:2.7.15
          requires:
            - ec2_test-update-service-command-master
          aws-access-key-id: "${AWS_ACCESS_KEY_ID}"
          aws-region: "${AWS_DEFAULT_REGION}"
          family: "${AWS_RESOURCE_NAME_PREFIX_EC2}-family"
          service-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-cluster"
          container-env-var-updates: "container=${AWS_RESOURCE_NAME_PREFIX_EC2}-service,name=VERSION_INFO,value=\"${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}\",container=${AWS_RESOURCE_NAME_PREFIX_EC2}-service,name=BUILD_DATE,value=$(date)"
          verify-revision-is-deployed: true
          fail-on-verification-timeout: false
          post-steps:
            - test-deployment:
                service-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-service"
                cluster-name: "${AWS_RESOURCE_NAME_PREFIX_EC2}-cluster"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/

      - aws-ecs/deploy-service-update:
          name: fargate_test-update-service-job-master
          docker-image-for-job: circleci/python:3.4.9
          requires:
            - fargate_test-update-service-command-master
          aws-access-key-id: "${AWS_ACCESS_KEY_ID}"
          aws-region: "${AWS_DEFAULT_REGION}"
          family: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-cluster"
          container-env-var-updates: "container=${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service,name=VERSION_INFO,value=\"${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}\",container=${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service,name=BUILD_DATE,value=$(date)"
          verify-revision-is-deployed: true
          max-poll-attempts: 40
          poll-interval: 10
          post-steps:
            - test-deployment:
                service-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-service"
                cluster-name: "${AWS_RESOURCE_NAME_PREFIX_FARGATE}-cluster"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/

      - aws-ecs/deploy-service-update:
          name: codedeploy_fargate_test-update-service-job-master
          docker-image-for-job: circleci/python:3.4.9
          requires:
            - codedeploy_fargate_test-update-service-command-master
          aws-access-key-id: "${AWS_ACCESS_KEY_ID}"
          aws-region: "${AWS_DEFAULT_REGION}"
          family: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          cluster-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-cluster"
          container-image-name-updates: "container=${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service,image-and-tag=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}:${CIRCLE_SHA1}"
          container-env-var-updates: "container=${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service,name=VERSION_INFO,value=\"${CIRCLE_SHA1}_${CIRCLE_BUILD_NUM}\",container=${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service,name=BUILD_DATE,value=$(date)"
          deployment-controller: "CODE_DEPLOY"
          codedeploy-application-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeployapp"
          codedeploy-deployment-group-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeploygroup"
          codedeploy-load-balanced-container-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
          codedeploy-load-balanced-container-port: 8080
          # verify-revision-is-deployed is not supported for blue/green deployment type services
          verify-revision-is-deployed: false
          post-steps:
            - wait-for-codedeploy-deployment:
                application-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeployapp"
                deployment-group-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-codedeploygroup"
            - test-deployment:
                service-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
                cluster-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-cluster"
                delete-load-balancer: true
            - delete-service:
                service-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-service"
                cluster-name: "${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}-cluster"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/

      - tear-down-test-env:
          name: ec2_tear-down-test-env-master
          requires:
            - ec2_test-update-service-job-master
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_EC2}
          terraform-config-dir: "tests/terraform_setup/ec2"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/

      - tear-down-test-env:
          name: fargate_tear-down-test-env-master
          requires:
            - fargate_test-update-service-job-master
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/

      - tear-down-test-env:
          name: codedeploy_fargate_tear-down-test-env-master
          requires:
            - codedeploy_fargate_test-update-service-job-master
          terraform-image: "hashicorp/terraform:latest"
          aws-resource-name-prefix: ${AWS_RESOURCE_NAME_PREFIX_CODEDEPLOY_FARGATE}
          terraform-config-dir: "tests/terraform_setup/fargate_codedeploy"
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/

      - publish-orb:
          name: publish-prod-orb
          to-prod: true
          context: orb-publishing
          requires:
            - fargate_tear-down-test-env-master
            - ec2_tear-down-test-env-master
            - codedeploy_fargate_tear-down-test-env-master
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /master-.*/
